openapi: 3.0.0
info:
  title: Stark Infra API
  version: v2
  description: Stark Infra API for financial services in Brazil
  contact:
    email: developers@starkbank.com
    name: Stark Infra Developers
    url: 'https://starkinfra.com'
  license:
    name: Stark Infra License
externalDocs:
  url: 'https://starkinfra.com/docs/api'
  description: StarkInfra API documentation
servers:
  # Added by API Auto Mocking Plugin
  - url: 'https://sandbox.api.starkinfra.com/'
  - url: 'https://api.starkinfra.com/'
tags:
  - name: Pix
  - name: Pix > Pix Request
    description: >-
      Pix Requests are used to receive or send instant payments to accounts
      hosted in other Pix participants.


      Inbound Pix Requests will be automatically created whenever you receive an
      instant payment, but their completion will depend on your authorization
      response.


      Authorization requests will be sent whenever you receive an inbound Pix
      Request. To receive and respond to authorization requests, you must
      register a url of your choice where they will be forwarded to.


      If there is no authorization url registered, all inbound Pix Requests will
      be denied by default.
  - name: Pix > Pix Reversal
    description: >-
      Pix Reversals are instant payments used to revert Pix Request. You can
      only revert inbound Pix Requests.


      Inbound Pix Reversals will be automatically created whenever you receive
      an instant payment reversal, but their completion will depend on your
      authorization response.


      Authorization requests will be sent whenever you receive a Pix Reversal.
      To receive and respond to authorization requests, you must register a url
      of your choice where they will be forwarded to.


      If there is no authorization url registered, all inbound Pix Reversals
      will be accepted by default.
  - name: Pix > Pix Balance
    description: >-
      The Pix balance entity holds the total funds available in your banking
      account and can be calculated as the sum of its transactions (cash-in +
      cash-out). Therefore, you can also interpret Transactions as balance
      change logs.
  - name: Pix > Pix Statement
    description: >-
      Pix Statement objects store information about all Pix transactions that
      happened during a specific day. Pix Statements are only available for
      direct participants.
  - name: Pix > Pix Key
    description: >-
      Pix Keys are registered at DICT (DiretÃ³rio de Identificadores de Contas
      Transacionais), which is a centralized Pix service managed by the
      Brazilian Central Bank that allows you to search for transactional
      accounts with convenient addressing keys.


      The types of keys currently available are CPF, CNPJ, phone number, e-mail
      and EVP (random key).
  - name: Pix > Pix Claim
    description: >-
      A Pix Claim is a request to transfer a Pix Key to an account hosted in
      another Pix participant. Pix Claims must always be requested by the
      claimer.
  - name: Pix > Pix Director
    description: >-
      Pix Directors are used for registering Pix participants\` emergency
      contact information at the Brazilian Central Bank. This process is
      mandatory for all direct Pix participants.


      A new Pix Director can be created at any time to update the registered
      contact information.
  - name: Pix > Pix Infraction
    description: >-
      Pix Infractions are used to report transactions suspected of fraud,
      request reversals or chargeback reversals.


      Pix Infractions can be created by either participant of a transaction.
      After created, the receiving party must analyse the infraction and close
      it by agreeing or disagreeing.
  - name: Pix > Pix Chargeback
    description: >-
      A Pix Chargeback can be created when fraud is detected on a transaction or
      a system malfunction results in an erroneous transaction.


      If the reason for the Pix Chargeback is "fraud", it must be created only
      after a Pix Infraction regarding the same transaction has been agreed and
      closed.
  - name: Pix > Pix Domain
    description: >-
      The Pix Domain object displays the domain name and the QR Code domain
      certificates of registered Pix participants able to issue dynamic QR
      Codes.


      Certificates are used in the validation of the URLs contained in the
      dynamic QR Codes.
  - name: Issuing
  - name: Issuing > Issuing Balance
    description: >-
      The Issuing Balance entity holds the total funds your sub-issuer has
      available for authorizing purchases and creating physical cards.
  - name: Issuing > Issuing Bin
    description: >-
      The Issuing Bin object displays the information of BINs registered to your
      Workspace.


      BINs represent a group of cards that begin with the same numbers (BIN) and
      offer the same product to end customers.
  - name: Issuing > Issuing Card
    description: >-
      The Issuing Card resource is used to issue cards under your sub-issuer.


      To avoid security concerns, sensitive information will only be returned
      when the "expand" parameter is used.
  - name: Issuing > Issuing Holder
    description: >-
      The Issuing Holder describes a cardholder that may group several cards.


      To avoid security concerns, sensitive information will only be returned
      when the "expand" parameter is used.
  - name: Issuing > Issuing Invoice
    description: >-
      Issuing invoices are requests to transfer money to your issuing account.
      When an Issuing Invoice you created is paid and credited, your issuing
      balance changes.
  - name: Issuing > Issuing Purchase
    description: Issuing purchases are created when a cardholder makes a card purchase.
  - name: Issuing > Issuing Transaction
    description: >-
      Issuing transactions are created whenever there is an issuing balance
      shift.
  - name: Issuing > Issuing Withdrawal
    description: >-
      Issuing Withdrawals transfer cash from your issuing account to your
      banking account.
  - name: Credit
  - name: Credit > Credit Note
    description: >-
      Create a CCB to lend or borrow money without being a Financial
      Institution.


      When a Credit Note is created, a contract between a lender and a receiver
      is established using Stark Infra's endorsement as legal tender.


      After signature, a payment with the net amount is sent to the credit
      receiver on the scheduled date.


      Finally, all Invoices associated with the Credit Note are created with a
      due date as installments.
  - name: Event
  - name: Webhook
    description: >-
      A Webhook is used to subscribe to notification events on a user-selected
      endpoint.  

      Currently, available services for subscription are contract, credit-note,
      signer, issuing-card, issuing-invoice, issuing-purchase, pix-request.in,
      pix-request.out, pix-reversal.in, pix-reversal.out
paths:
  /{version}/pix-request:
    post:
      operationId: createPixRequests
      tags:
        - Pix > Pix Request
      summary: Create Pix requests
      description: >-
        Send Pix Requests to accounts hosted in other Pix participants.
        Direction: Outbound.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | amount | REQUIRED | A positive integer that represents the amount in
        cents to be transferred. Example: amount=100 (R$1.00). |

        | externalId | REQUIRED | Safe string that must be unique among all your
        Pix Requests. Example: externalId="my-unique-id-12345678". |

        | senderName | REQUIRED | Sender's full name. Example:
        senderName="Anthony Edward Stark". |

        | senderTaxId | REQUIRED | Sender's taxId (CPF/CNPJ). Example:
        senderTaxId="01.001.001/0001-01". |

        | senderBranchCode | REQUIRED | Sender's bank account branch code.
        Example: senderBranchCode="1234". |

        | senderAccountNumber | REQUIRED | Sender's account number. Example:
        senderAccountNumber="76543". |

        | senderAccountType | REQUIRED | Sender's account type. Options:
        "checking", "savings", "salary" and "payment". |

        | receiverName | REQUIRED | Array of strings to tag the entity for
        future queries. All tags will be converted to lowercase. |

        | receiverTaxId | REQUIRED | Receiver's taxId (CPF/CNPJ). Example:
        receiverTaxId="01.001.001/0001-01". |

        | receiverBankCode | REQUIRED | Receiver's bank code. Example:
        receiverBankCode="20018183". |

        | receiverAccountNumber | REQUIRED | Receiver's account number. Example:
        receiverAccountNumber="76543". |

        | receiverBranchCode | REQUIRED | Receiver's bank account branch code.
        Example: receiverBranchCode="1234". |

        | receiverAccountType | REQUIRED | Receiver's account type. Options:
        "checking", "savings", "salary" and "payment". |

        | endToEndId | REQUIRED | Central Bank's unique transaction id. Example:
        endToEndId="E00002649202201172211u34srod19le". |

        | receiverKeyId | OPTIONAL | Receiver's Pix Key id. Can be a taxId
        (CPF/CNPJ), a phone number, an email or a alphanumeric sequence (EVP).
        Example: receiverKeyId="+5511989898989" |

        | reconciliationId | OPTIONAL | Reconciliation id linked to this
        payment. Example: "b77f5236-7ab9-4487-9f95-66ee6eaf1781" |

        | description | OPTIONAL | Additional information to be delivered to the
        receiver. |

        | initiatorTaxId | OPTIONAL | Payment initiator's taxId (CPF/CNPJ).
        Example: "20.018.183/0001-80" |

        | cashAmount | OPTIONAL | Amount to be withdrawal from the cashier in
        cents. Example: 1000 (= R$ 10.00) |

        | cashierBankCode | OPTIONAL | Cashier's bank code. Example: "20018183"
        |

        | cashierType | OPTIONAL | Cashier's type. Options: "merchant",
        "participant" and "other" |

        | tags | OPTIONAL | List of strings to tag the entity for future
        queries. All tags will be converted to lowercase. |

        | method | OPTIONAL | Method used to retrieve receiver's account
        information. Options: "manual", "dict", "initiator", "dynamicQrcode",
        "staticQrcode" and "payerQrcode" |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Requests'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requests'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listPixRequests
      tags:
        - Pix > Pix Request
      summary: List Pix requests
      description: >-
        Here you can list and filter all Pix Requests you have made. We return
        it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: Filter entities that contain the specified tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: externalIds
          in: query
          description: List of strings to get specific entities by externalIds.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: endToEndIds
          in: query
          description: List of strings to get specific entities by endToEndIds.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Requests'
                - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ==
                requests:
                  - amount: 10
                    cashAmount: 0
                    cashierBankCode: ''
                    cashierType: ''
                    created: '2022-05-18T17:23:00.278215+00:00'
                    description: ''
                    endToEndId: E35547753202205181722Jy9eAC3yjXX
                    externalId: php-438493277
                    fee: 35
                    flow: out
                    id: '4684809204924416'
                    initiatorTaxId: ''
                    method: manual
                    receiverAccountNumber: '000001'
                    receiverAccountType: checking
                    receiverBankCode: '341'
                    receiverBranchCode: '0001'
                    receiverKeyId: ''
                    receiverName: Daenerys Targaryen Stormborn
                    receiverTaxId: 012.345.678-90
                    reconciliationId: ''
                    senderAccountNumber: '765438'
                    senderAccountType: checking
                    senderBankCode: '35547753'
                    senderBranchCode: '2201'
                    senderName: Joao
                    senderTaxId: 594.739.480-42
                    status: success
                    tags: []
                    updated: '2022-05-18T17:23:06.472103+00:00'
                  - amount: 1000
                    cashAmount: 0
                    cashierBankCode: ''
                    cashierType: ''
                    created: '2022-05-17T21:13:06.035916+00:00'
                    description: Money for nothing
                    endToEndId: E34052649202205172113cHFAlbI6WO9
                    externalId: ''
                    fee: 0
                    flow: in
                    id: '5702879260180480'
                    initiatorTaxId: ''
                    method: manual
                    receiverAccountNumber: '00000'
                    receiverAccountType: checking
                    receiverBankCode: '35547753'
                    receiverBranchCode: '0000'
                    receiverKeyId: ''
                    receiverName: ''
                    receiverTaxId: 594.739.480-42
                    reconciliationId: ''
                    senderAccountNumber: '5692908409716736'
                    senderAccountType: checking
                    senderBankCode: '34052649'
                    senderBranchCode: '0001'
                    senderName: Cora Pagamentos Ltda.
                    senderTaxId: 34.052.649/0001-78
                    status: failed
                    tags: []
                    updated: '2022-05-17T21:13:07.365846+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-request/{requestId}:
    get:
      operationId: getPixRequest
      tags:
        - Pix > Pix Request
      summary: Get a Pix request by ID
      description: Get a single Pix Request by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: requestId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
              example:
                request:
                  amount: 10000
                  cashAmount: 100
                  cashierBankCode: '20018183'
                  cashierType: merchant
                  created: '2022-05-17T18:58:38.092412+00:00'
                  description: A Lannister always pays his debts
                  endToEndId: E35547753202201201450u34sDGd19l3
                  externalId: my_unique_id_1
                  fee: 35
                  flow: out
                  id: '5632510516002816'
                  initiatorTaxId: ''
                  method: manual
                  receiverAccountNumber: '00000'
                  receiverAccountType: checking
                  receiverBankCode: '20018183'
                  receiverBranchCode: '0001'
                  receiverKeyId: ''
                  receiverName: Arya Stark
                  receiverTaxId: 012.345.678-90
                  reconciliationId: ''
                  senderAccountNumber: '00000'
                  senderAccountType: checking
                  senderBankCode: '35547753'
                  senderBranchCode: '0000'
                  senderName: jamie Lannister
                  senderTaxId: 594.739.480-42
                  status: failed
                  tags:
                    - lannister
                    - chargeback
                  updated: '2022-05-17T18:58:42.863663+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-request/log:
    get:
      operationId: listPixRequestLogs
      tags:
        - Pix > Pix Request
      summary: List Pix request logs
      description: >-
        Get a paged list of all Pix Request Logs. A log tracks a change a Pix
        Request entity according to its life cycle.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: requestIds
          in: query
          description: List of strings to get specific logs by their Pix Request ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: reconciliationId
          in: query
          description: Filter entities by their reconciliation ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      request:
                        $ref: '#/components/schemas/Request'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CkoKFAoHY3JlYXRlZBIJCMaFuPOC1fcCEi5qEGl-YXBpLW1zLXNwaS1kZXZyGgsSDVBpeFJlcXVlc3RMb2cYgICAlPDXyAgMGAAgAQ==
                logs:
                  - created: '2022-05-17T18:58:41.842058+00:00'
                    errors: []
                    id: '4790818795683840'
                    request:
                      amount: 10000
                      cashAmount: 100
                      cashierBankCode: '20018183'
                      cashierType: merchant
                      created: '2022-05-17T18:58:38.092412+00:00'
                      description: A Lannister always pays his debts
                      endToEndId: E35547753202201201450u34sDGd19l3
                      externalId: my_unique_id_1
                      fee: 35
                      flow: out
                      id: '5632510516002816'
                      initiatorTaxId: ''
                      method: manual
                      receiverAccountNumber: '00000'
                      receiverAccountType: checking
                      receiverBankCode: '20018183'
                      receiverBranchCode: '0001'
                      receiverKeyId: ''
                      receiverName: Arya Stark
                      receiverTaxId: 012.345.678-90
                      reconciliationId: ''
                      senderAccountNumber: '00000'
                      senderAccountType: checking
                      senderBankCode: '35547753'
                      senderBranchCode: '0000'
                      senderName: jamie Lannister
                      senderTaxId: 594.739.480-42
                      status: failed
                      tags:
                        - lannister
                        - chargeback
                      updated: '2022-05-17T18:58:42.882204+00:00'
                    type: refunded
                  - created: '2022-05-17T18:58:40.872310+00:00'
                    errors:
                      - code: invalidAccountNumber
                        message: Invalid account number
                    id: '5913985492713472'
                    request:
                      amount: 10000
                      cashAmount: 100
                      cashierBankCode: '20018183'
                      cashierType: merchant
                      created: '2022-05-17T18:58:38.092412+00:00'
                      description: A Lannister always pays his debts
                      endToEndId: E35547753202201201450u34sDGd19l3
                      externalId: my_unique_id_1
                      fee: 35
                      flow: out
                      id: '5632510516002816'
                      initiatorTaxId: ''
                      method: manual
                      receiverAccountNumber: '00000'
                      receiverAccountType: checking
                      receiverBankCode: '20018183'
                      receiverBranchCode: '0001'
                      receiverKeyId: ''
                      receiverName: Arya Stark
                      receiverTaxId: 012.345.678-90
                      reconciliationId: ''
                      senderAccountNumber: '00000'
                      senderAccountType: checking
                      senderBankCode: '35547753'
                      senderBranchCode: '0000'
                      senderName: jamie Lannister
                      senderTaxId: 594.739.480-42
                      status: failed
                      tags:
                        - lannister
                        - chargeback
                      updated: '2022-05-17T18:58:42.882093+00:00'
                    type: failed
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-request/log/{logId}:
    get:
      operationId: getPixRequestLog
      tags:
        - Pix > Pix Request
      summary: Get a Pix request log by ID
      description: Get a single Pix Request Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      request:
                        $ref: '#/components/schemas/Request'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  created: '2022-05-17T18:58:41.842058+00:00'
                  errors: []
                  id: '4790818795683840'
                  request:
                    amount: 10000
                    cashAmount: 100
                    cashierBankCode: '20018183'
                    cashierType: merchant
                    created: '2022-05-17T18:58:38.092412+00:00'
                    description: A Lannister always pays his debts
                    endToEndId: E35547753202201201450u34sDGd19l3
                    externalId: my_unique_id_1
                    fee: 35
                    flow: out
                    id: '5632510516002816'
                    initiatorTaxId: ''
                    method: manual
                    receiverAccountNumber: '00000'
                    receiverAccountType: checking
                    receiverBankCode: '20018183'
                    receiverBranchCode: '0001'
                    receiverKeyId: ''
                    receiverName: Arya Stark
                    receiverTaxId: 012.345.678-90
                    reconciliationId: ''
                    senderAccountNumber: '00000'
                    senderAccountType: checking
                    senderBankCode: '35547753'
                    senderBranchCode: '0000'
                    senderName: jamie Lannister
                    senderTaxId: 594.739.480-42
                    status: failed
                    tags:
                      - lannister
                      - chargeback
                    updated: '2022-05-17T18:58:42.882204+00:00'
                  type: refunded
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-reversal:
    post:
      operationId: createPixReversals
      tags:
        - Pix > Pix Reversal
      summary: Create Pix reversals
      description: >-
        Send back a received Pix. Direction: Outbound.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | amount | REQUIRED | A positive integer that represents the amount in
        cents to be reversed from the Pix. Example: amount=100 (R$1.00). |

        | externalId | REQUIRED | Url safe string that must be unique among all
        your Pix Reversals. Example: externalId="my-internal-id-12345678". |

        | endToEndId | REQUIRED | Central Bank's unique transaction id of the
        Pix to be reversed. Example:
        endToEndId="E24152649202201172211u34srod19le". |

        | reason | REQUIRED | Reason why the Pix is being reversed. Options:
        "bankError", "fraud", "cashierError" and "customerRequest" |

        | tags | OPTIONAL | List of strings to tag the entity for future
        queries. All tags will be converted to lowercase. Example:
        tags=\["iron","armor"\] |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reversals'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reversals'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listPixReversals
      tags:
        - Pix > Pix Reversal
      summary: List Pix reversals
      description: >-
        Here you can list and filter all Pix Reversals you have made. We return
        it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: Filter entities that contain the specified tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: returnIds
          in: query
          description: List of strings to get specific entities by returnIds.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: externalIds
          in: query
          description: List of strings to get specific entities by externalIds.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Reversals'
                  - type: object
                properties:
                    cursor:
                      type: string
                      example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CkgKFAoHY3JlYXRlZBIJCNru8oXIzfYCEixqEGl-YXBpLW1zLXNwaS1kZXZyGAsSC1BpeFJldmVyc2FsGICAgKSCxrAJDBgAIAE=
                reversals:
                  - amount: 10
                    created: '2022-05-10T18:22:39.490292+00:00'
                    endToEndId: E00000000202205101815RMpeESzgU7U
                    externalId: euibgfquikq2222e232242u1vy232rjkqef
                    fee: 50
                    flow: out
                    id: '5891059359940608'
                    reason: bankError
                    returnId: D34052649202205101822417Mfcaz73q
                    status: success
                    tags: []
                    updated: '2022-05-10T18:22:45.088746+00:00'
                  - amount: 1
                    created: '2022-03-17T16:27:14.727770+00:00'
                    endToEndId: E34052649202203041806u3kgzzaazla
                    externalId: null
                    fee: 0
                    flow: in
                    id: '5280061607378944'
                    reason: fraud
                    returnId: D39908427202203171627FgbOba4nEnt
                    status: failed
                    tags: []
                    updated: '2022-03-17T16:27:17.888461+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-reversal/{reversalId}:
    get:
      operationId: getPixReversal
      tags:
        - Pix > Pix Reversal
      summary: Get a Pix reversal by ID
      description: Get a single Pix Reversal by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: reversalId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reversal'
              example:
                reversal:
                  amount: 10
                  created: '2022-05-10T18:22:39.490292+00:00'
                  endToEndId: E00000000202205101815RMpeESzgU7U
                  externalId: euibgfquikq2222e232242u1vy232rjkqef
                  fee: 50
                  flow: out
                  id: '5891059359940608'
                  reason: bankError
                  returnId: D34052649202205101822417Mfcaz73q
                  status: success
                  tags: []
                  updated: '2022-05-10T18:22:45.088746+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-reversal/log:
    get:
      operationId: listPixReversalLogs
      tags:
        - Pix > Pix Reversal
      summary: List Pix reversal logs
      description: >-
        Get a paged list of all Pix Reversal Logs. A log tracks a change in the
        Pix Request Logs entity according to its life cycle.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: reversalIds
          in: query
          description: List of strings to get specific logs by their Pix Reversal ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      reversal:
                        $ref: '#/components/schemas/Reversal'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CksKFAoHY3JlYXRlZBIJCISgxMjG1fcCEi9qEGl-YXBpLW1zLXNwaS1kZXZyGwsSDlBpeFJldmVyc2FsTG9nGICAgKSyvLsLDBgAIAE=
                logs:
                  - created: '2022-05-10T18:22:44.867189+00:00'
                    errors: []
                    id: '5046634429808640'
                    reversal:
                      amount: 10
                      created: '2022-05-10T18:22:39.490292+00:00'
                      endToEndId: E00000000202205101815RMpeESzgU7U
                      externalId: euibgfquikq2222e232242u1vy232rjkqef
                      fee: 50
                      flow: out
                      id: '5891059359940608'
                      reason: bankError
                      returnId: D34052649202205101822417Mfcaz73q
                      status: success
                      tags: []
                      updated: '2022-05-10T18:22:45.106138+00:00'
                    type: success
                  - created: '2022-05-10T18:22:42.020356+00:00'
                    errors: []
                    id: '6454009313361920'
                    reversal:
                      amount: 10
                      created: '2022-05-10T18:22:39.490292+00:00'
                      endToEndId: E00000000202205101815RMpeESzgU7U
                      externalId: euibgfquikq2222e232242u1vy232rjkqef
                      fee: 50
                      flow: out
                      id: '5891059359940608'
                      reason: bankError
                      returnId: D34052649202205101822417Mfcaz73q
                      status: processing
                      tags: []
                      updated: '2022-05-10T18:22:45.106048+00:00'
                    type: sent
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-reversal/log/{logId}:
    get:
      operationId: getPixReversalLog
      tags:
        - Pix > Pix Reversal
      summary: Get a Pix reversal log by ID
      description: Get a single Pix Reversal Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      reversal:
                        $ref: '#/components/schemas/Reversal'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  created: '2022-05-10T18:22:44.867189+00:00'
                  errors: []
                  id: '5046634429808640'
                  reversal:
                    amount: 10
                    created: '2022-05-10T18:22:39.490292+00:00'
                    endToEndId: E00000000202205101815RMpeESzgU7U
                    externalId: euibgfquikq2222e232242u1vy232rjkqef
                    fee: 50
                    flow: out
                    id: '5891059359940608'
                    reason: bankError
                    returnId: D34052649202205101822417Mfcaz73q
                    status: success
                    tags: []
                    updated: '2022-05-10T18:22:45.106138+00:00'
                  type: success
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-balance:
    get:
      operationId: listPixBalances
      tags:
        - Pix > Pix Balance
      summary: List Pix balances
      description: Get the current Pix Balance in your workspace.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Balance'
                  - type: object
                properties:
                    cursor:
                      type: string
                      example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                balances:
                  - amount: 46641
                    currency: BRL
                    id: '6275127679385600'
                    updated: '2022-05-17T18:58:41.670570+00:00'
                cursor: null
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-statement:
    post:
      operationId: createPixStatement
      tags:
        - Pix > Pix Statement
      summary: Create a Pix statement
      description: >-
        Create a Pix Statement for a specific date. After that, the statement
        will be downloaded asynchronously from the Central Bank. When its status
        changes to "success", the statement will be available for download in
        CSV format.


        | Parameters | Value/ Type | Description |

        | --- | --- | --- |

        | after | REQUIRED | Transactions that happened at this date are stored
        in the Pix Statement, must be the same as the before parameter. Example:
        after="2022-01-20" |

        | before | REQUIRED | Transactions that happened at this date are stored
        in the Pix Statement, must be the same as the after parameter. Example:
        after="2022-02-20" |

        | type | REQUIRED | Type of statement to be created. Options:
        "interchange", "interchangeTotal" and "transaction". |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statement'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listPixStatements
      tags:
        - Pix > Pix Statement
      summary: List Pix statements
      description: >-
        Here you can list and filter all Pix Statements you have created. We
        return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Statements'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CjMSLWoQaX5hcGktbXMtc3BpLWRldnIZCxIMUGl4U3RhdGVtZW50GICAgKTO7pIIDBgAIAA=
                statements:
                  - after: '2022-01-01T03:00:00+00:00'
                    before: '2022-01-02T02:59:59.999999+00:00'
                    created: '2022-03-22T18:20:51.308948+00:00'
                    id: '4544014539816960'
                    status: success
                    transactionCount: 0
                    updated: '2022-03-22T18:20:56.320174+00:00'
                  - after: '2022-01-10T03:00:00+00:00'
                    before: '2022-01-11T02:59:59.999999+00:00'
                    created: '2022-02-17T19:42:28.092174+00:00'
                    id: '4586565049253888'
                    status: failed
                    transactionCount: 0
                    updated: '2022-02-17T19:42:30.818301+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-statement/{statementId}:
    get:
      operationId: getPixStatement
      tags:
        - Pix > Pix Statement
      summary: Get a Pix statement by ID
      description: >-
        Retrieve a specific Pix Statement that was previously created by it's
        id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: statementId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statement'
              example:
                statement:
                  after: '2022-01-01T03:00:00+00:00'
                  before: '2022-01-02T02:59:59.999999+00:00'
                  created: '2022-03-22T18:20:51.308948+00:00'
                  id: '4544014539816960'
                  status: success
                  transactionCount: 0
                  updated: '2022-03-22T18:20:56.320174+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-statement/{statementId}/csv:
    get:
      operationId: getPixStatementCSV
      tags:
        - Pix > Pix Statement
      summary: Get a Pix statement csv by ID
      description: >-
        Download a specific Pix Statement in CSV format. You can only download a
        Pix Statement after its status has changed to "success".
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: statementId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
      responses:
        '200':
          description: Pix Statement .zip receipt blob
          content:
            application/json:
              schema:
                type: string
                format: binary
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-key:
    post:
      operationId: createPixKey
      tags:
        - Pix > Pix Key
      summary: Create a Pix key
      description: >-
        Create a Pix Key linked to a specific account.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | accountCreated | REQUIRED | Opening Date or DateTime for the account
        linked to the Pix Key. Example: accountCreated="2022-01-01" |

        | accountNumber | REQUIRED | Number of the account linked to the Pix
        Key. Example: accountNumber="76543". |

        | accountType | REQUIRED | Type of the account linked to the Pix Key.
        Options: "checking", "savings", "salary" and "payment". |

        | branchCode | REQUIRED | Branch code of the account linked to the Pix
        Key. Example: branchCode="1234". |

        | name | REQUIRED | Account holder's name of the account linked to the
        Pix Key. Example: name="Jamie Lannister".  <br> |

        | taxId | REQUIRED | Account holder's taxId (CPF/CNPJ) of the account
        linked to the Pix Key. Example: taxId="012.345.678-90".  <br> |

        | id | OPTIONAL | Id of the registered Pix Key. Allowed types are: CPF,
        CNPJ, phone number or email. If this parameter is not passed, an EVP
        will be created. Example: "+5511989898989"  <br> |

        | tags | OPTIONAL | List of strings to tag the entity for future
        queries. All tags will be converted to lowercase. Example:
        tags=\["iron", "bank"\].  <br> |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listPixKeys
      tags:
        - Pix > Pix Key
      summary: List Pix key
      description: Here you can list and filter all Pix Keys you have. We return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: Filter entities that contain the specified tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          description: Filter entities of a specific type.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Keys'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CkUKFAoHY3JlYXRlZBIJCMbA3o385PcCEilqEWl-YXBpLW1zLWRpY3QtZGV2chQLEgdEaWN0S2V5GICAgITe4YkKDBgAIAE=
                keys:
                  - accountCreated: '2022-02-02T02:59:59.999999+00:00'
                    accountNumber: '0000'
                    accountType: savings
                    bankCode: '35547753'
                    bankName: ''
                    branchCode: '0000'
                    created: '2022-05-17T19:19:46.274234+00:00'
                    id: exemplopostman@hotmail.com
                    name: Jamie Lannister
                    owned: '2022-05-17T19:19:46.274234+00:00'
                    ownerType: individual
                    status: registered
                    tags: []
                    taxId: 012.345.678-90
                    type: email
                  - accountCreated: '2022-01-02T02:59:59.999999+00:00'
                    accountNumber: '76543'
                    accountType: salary
                    bankCode: '35547753'
                    bankName: ''
                    branchCode: '1234'
                    created: '2022-05-16T21:32:10.415213+00:00'
                    id: bdb5b5b8-f963-4834-93e5-9078dc946704
                    name: Jamie Lannister
                    owned: '2022-05-16T21:32:10.415213+00:00'
                    ownerType: individual
                    status: registered
                    tags: []
                    taxId: 012.345.678-90
                    type: evp
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-key/{keyId}:
    get:
      operationId: getPixKey
      tags:
        - Pix > Pix Key
      summary: Get a Pix key by ID
      description: >-
        Get a specific Pix Key by it's id. This method can access any Pix Key,
        not only ones linked to your bank code.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: keyId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
        - name: payerId
          in: query
          description: Payer id (CPF/CNPJ) of the individual or business requesting the Pix Key information. This id is used by the Central Bank to limit request rates.
          required: true
          schema:
            type: string
        - name: endToEndId
          in: query
          description: Central Bank's unique transaction id. If the request results in the creation of a Pix Request, the same end to end id should be used. If this parameter is not passed, one endToEndId will be automatically created.
          required: false
          schema:
            type: string
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
              example:
                key:
                  accountCreated: '2022-02-02T02:59:59.999999+00:00'
                  accountNumber: '0000'
                  accountType: savings
                  bankCode: '35547753'
                  bankName: ''
                  branchCode: '0000'
                  created: '2022-05-17T19:19:46.274234+00:00'
                  id: exemplopostman@hotmail.com
                  name: Jamie Lannister
                  owned: '2022-05-17T19:19:46.274234+00:00'
                  ownerType: individual
                  status: registered
                  tags: []
                  taxId: 012.345.678-90
                  type: email
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    delete:
      operationId: cancelPixKey
      tags:
        - Pix > Pix Key
      summary: Cancel a Pix key by ID
      description: Cancel a single Pix Key.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: keyId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Key'
                - type: object
                properties:
                  status:
                    type: string
                    example: "canceled"
              example:
                key:
                  accountCreated: '2022-02-02T02:59:59.999999+00:00'
                  accountNumber: '0000'
                  accountType: savings
                  bankCode: '35547753'
                  bankName: ''
                  branchCode: '0000'
                  created: '2022-05-17T19:19:46.274234+00:00'
                  id: exemplopostman@hotmail.com
                  name: Jamie Lannister
                  owned: '2022-05-17T19:19:46.274234+00:00'
                  ownerType: individual
                  status: registered
                  tags: []
                  taxId: 012.345.678-90
                  type: email
                message: Key deletion successfully requested.
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    patch:
      operationId: updatePixKey
      tags:
        - Pix > Pix Key
      summary: Update a Pix key by ID
      description: >-
        Update the account information or the holder's name linked to a Pix Key
        already owned by the participant. Pix Keys with EVP type can only be
        patched for branch transfer or reconciliation reasons.


        | **Parameter** | **Value Type** | **Description** |

        | --- | --- | --- |

        | id | REQUIRED | Id of the Pix Key to be patched. Example:
        "+5511989898989" |

        | reason | REQUIRED | Reason for the patch. Options: "branchTransfer",
        "reconciliation" and "userRequested". An EVP Pix Key does not accept
        user requested patches.  <br> |

        | accountCreated | OPTIONAL | Opening DateTime for the account to be
        linked to the Pix Key. Example: accountCreated="2022-01-01" |

        | accountNumber | OPTIONAL | Account number of the account to be linked
        to the Pix Key. Example: accountNumber="76543". |

        | accountType | OPTIONAL | Account type of the account to be linked to
        the Pix Key. Options: "checking", "savings", "salary" and "payment". 
        <br> |

        | branchCode | OPTIONAL | Branch code of the account to be linked to the
        Pix Key. Example: branchCode="1234". |

        | name | OPTIONAL | Holder's name of the account to be linked to the Pix
        Key. Example: name="Jamie Lannister". |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - reason
              properties:
                id:
                  type: string
                  example: +5511989898989
                reason:
                  type: string
                  example: reconciliation
                accountCreated:
                  type: string
                  example: "2022-01-01T12:00:00:00"
                accountNumber:
                  type: string
                  example: 76543
                accountType:
                  type: string
                  example: salary
                branchCode:
                  type: string
                  example: 1234
                name:
                  type: string
                  example: Jamie Lannister
            example:
                reason: reconciliation
                accountCreated: "2022-01-01T12:00:00:00"
                accountNumber: 76543
                accountType: salary
                branchCode: 1234
                name: Jamie Lannister
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: keyId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-key/log:
    get:
      operationId: listPixKeyLogs
      tags:
        - Pix > Pix Key
      summary: List Pix key logs
      description: >-
        Get a paged list of all Pix Key Logs. A log tracks a change in the Pix
        Key Logs entity according to its life cycle.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: keyIds
          in: query
          description: List of strings to get specific logs by their Pix Key ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      key:
                        $ref: '#/components/schemas/Key'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CkgKFAoHY3JlYXRlZBIJCMb5weSh5_cCEixqEWl-YXBpLW1zLWRpY3QtZGV2chcLEgpEaWN0S2V5TG9nGICAgISC_4oIDBgAIAE=
                logs:
                  - created: '2022-05-17T19:27:38.430274+00:00'
                    errors: []
                    id: '6629439869812736'
                    key:
                      accountCreated: '2022-01-02T02:59:59.999999+00:00'
                      accountNumber: '121212'
                      accountType: savings
                      bankCode: '35547753'
                      bankName: ''
                      branchCode: '0001'
                      created: '2022-05-17T19:26:03.784235+00:00'
                      id: '+551196969696'
                      name: Jamie Lannister
                      owned: '2022-05-17T19:26:03.784235+00:00'
                      ownerType: individual
                      status: registered
                      tags: []
                      taxId: 012.345.678-90
                      type: phone
                    type: updated
                  - created: '2022-05-17T19:26:03.881670+00:00'
                    errors: []
                    id: '4551944324513792'
                    key:
                      accountCreated: '2022-02-02T02:59:59.999999+00:00'
                      accountNumber: '0000'
                      accountType: savings
                      bankCode: '35547753'
                      bankName: ''
                      branchCode: '0000'
                      created: '2022-05-17T19:26:03.784235+00:00'
                      id: '+551196969696'
                      name: Jamie Lannister
                      owned: '2022-05-17T19:26:03.784235+00:00'
                      ownerType: individual
                      status: registered
                      tags: []
                      taxId: 012.345.678-90
                      type: phone
                    type: registered
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-key/log/{logId}:
    get:
      operationId: getPixKeyLog
      tags:
        - Pix > Pix Key
      summary: Get a Pix key log by ID
      description: Get a single Pix Key Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      key:
                        $ref: '#/components/schemas/Key'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  created: '2022-05-17T19:27:38.430274+00:00'
                  errors: []
                  id: '6629439869812736'
                  key:
                    accountCreated: '2022-01-02T02:59:59.999999+00:00'
                    accountNumber: '121212'
                    accountType: savings
                    bankCode: '35547753'
                    bankName: ''
                    branchCode: '0001'
                    created: '2022-05-17T19:26:03.784235+00:00'
                    id: '+551196969696'
                    name: Jamie Lannister
                    owned: '2022-05-17T19:26:03.784235+00:00'
                    ownerType: individual
                    status: registered
                    tags: []
                    taxId: 012.345.678-90
                    type: phone
                  type: updated
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-claim:
    post:
      operationId: createPixClaim
      tags:
        - Pix > Pix Claim
      summary: Create a Pix claim
      description: >-
        Create a Pix Claim to request the transfer of a Pix Key to an account
        hosted at other Pix participants. There are two distinct Pix Claim
        types.


        An ownership Pix Claim is a request to change the holder of a Pix Key.
        These Pix Claims can only be requested for Pix Keys with phone or email
        keyTypes.


        A portability Pix Claim is a request to change the account liked to a
        Pix Key without changing its holder. These Pix Claims can be requested
        for Pix Keys with phone, email or taxId (CPF/CNPJ) keyTypes.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | accountCreated | REQUIRED | Opening Date or DateTime for the account
        claiming the Pix Key. Example: accountCreated="2022-01-01" |

        | accountNumber | REQUIRED | Number of the account claiming the Pix Key.
        Example: accountNumber="76543".  <br> |

        | accountType | REQUIRED | Type of the account claiming the Pix Key.
        Options: "checking", "savings", "salary" and "payment". |

        | branchCode | REQUIRED | Branch code of the account claiming the Pix
        Key. Example: branchCode="1234".  <br> |

        | name | REQUIRED | Account holder's name of the account claiming the
        Pix Key. Example: name="Jamie Lannister".  <br> |

        | taxId | REQUIRED | Holder's taxId (CPF/CNPJ) of the account claiming
        the Pix Key. Example: taxId="012.345.678-90".  <br> |

        | keyId | REQUIRED | Id of the registered Pix Key to be claimed. Allowed
        keyTypes are CPF, CNPJ, phone number or email. Example:
        "+5511989898989".  <br> |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Claim'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listPixClaims
      tags:
        - Pix > Pix Claim
      summary: List Pix claim
      description: >-
        Here you can list and filter all Pix Claims you have. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          description: Filter entities by their type.
          required: false
          schema:
            type: string
        - name: keyId
          in: query
          description: Filter entities by their Pix Key id.
          required: false
          schema:
            type: string
        - name: keyType
          in: query
          description: Filter entities by their Pix Key type.
          required: false
          schema:
            type: string
        - name: agent
          in: query
          description: Filter entities by their agent.
          required: false
          schema:
            type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Claims'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                claims:
                  - accountCreated: '2022-02-02T02:59:59.999999+00:00'
                    accountNumber: '5692908409716736'
                    accountType: checking
                    agent: claimer
                    bankCode: '35547753'
                    branchCode: '0000'
                    claimedBankCode: '31804966'
                    claimerBankCode: '35547753'
                    created: '2022-05-17T19:31:21.972149+00:00'
                    id: '5961418104897536'
                    keyId: postmanteste@starkbank.com
                    keyType: email
                    name: testKey
                    status: created
                    taxId: 012.345.678-90
                    type: ownership
                    updated: '2022-05-17T19:31:25.234171+00:00'
                  - accountCreated: '2022-01-02T02:59:59.999999+00:00'
                    accountNumber: '76549'
                    accountType: salary
                    agent: claimer
                    bankCode: '35547753'
                    branchCode: '1234'
                    claimedBankCode: '70431630'
                    claimerBankCode: '35547753'
                    created: '2022-05-16T21:20:40.479804+00:00'
                    id: '6129836925911040'
                    keyId: '+551165857989'
                    keyType: phone
                    name: Tony Stark
                    status: delivered
                    taxId: 012.345.678-90
                    type: ownership
                    updated: '2022-05-16T21:21:01.253442+00:00'
                cursor: >-
                  CkcKFAoHY3JlYXRlZBIJCLzY5sT55PcCEitqEWl-YXBpLW1zLWRpY3QtZGV2chYLEglEaWN0Q2xhaW0YgICAhN7h8QoMGAAgAQ==
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-claim/{claimId}:
    get:
      operationId: getPixClaim
      tags:
        - Pix > Pix Claim
      summary: Get a Pix claim by ID
      description: Get a specific Pix Claim by it's id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: claimId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'
              example:
                claim:
                  accountCreated: '2022-02-02T02:59:59.999999+00:00'
                  accountNumber: '5692908409716736'
                  accountType: checking
                  agent: claimer
                  bankCode: '35547753'
                  branchCode: '0000'
                  claimedBankCode: '31804966'
                  claimerBankCode: '35547753'
                  created: '2022-05-17T19:31:21.972149+00:00'
                  id: '5961418104897536'
                  keyId: postmanteste@starkbank.com
                  keyType: email
                  name: testKey
                  status: delivered
                  taxId: 012.345.678-90
                  type: ownership
                  updated: '2022-05-17T19:32:00.656440+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    patch:
      operationId: updatePixClaim
      tags:
        - Pix > Pix Claim
      summary: Update a Pix claim by ID
      description: >-
        A Pix Claim can be patched for two distinct reasons.


        A received Pix Claim can be confirmed or canceled by patching its
        status. A received Pix Claim must be confirmed by the donor to be
        completed. Ownership Pix Claims can only be canceled by the donor if the
        reason is fraud.


        A sent Pix Claim can also be canceled by patching its status.


        | **Parameters** | **Value Type** | **Description** |

        | --- | --- | --- |

        | id | REQUIRED | Id of the Pix Claim to be patched. |

        | status | REQUIRED | Patched status for Pix Claim. Options: "confirmed"
        and "canceled" |

        | reason | OPTIONAL | Reason for the change in Pix Claim. Options:
        "fraud" and "userRequested". Default = "userRequested" |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - status
              properties:
                id:
                  type: integer
                  example: 5719405850615809
                status:
                  type: string
                  example: confirmed
                reason:
                  type: string
                  example: fraud
            example:
                status: confirmed
                reason: fraud
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: claimId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-claim/log:
    get:
      operationId: listPixClaimLogs
      tags:
        - Pix > Pix Claim
      summary: List Pix claim logs
      description: Here you can list and filter all Pix Claim Logs. We return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: claimIds
          in: query
          description: List of strings to get specific logs by their Pix Claim ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      claim:
                        $ref: '#/components/schemas/Claim'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                      agent:
                        type: string
                        example: "claimed"
                      reason:
                        type: string
                        example: ""
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CkoKFAoHY3JlYXRlZBIJCLHpgZyj5_cCEi5qEWl-YXBpLW1zLWRpY3QtZGV2chkLEgxEaWN0Q2xhaW1Mb2cYgICAhI28ywsMGAAgAQ==
                logs:
                  - agent: claimer
                    claim:
                      accountCreated: '2022-02-02T02:59:59.999999+00:00'
                      accountNumber: '5692908409716736'
                      accountType: checking
                      agent: claimer
                      bankCode: '35547753'
                      branchCode: '0000'
                      claimedBankCode: '31804966'
                      claimerBankCode: '35547753'
                      created: '2022-05-17T19:31:21.972149+00:00'
                      id: '5961418104897536'
                      keyId: postmanteste@starkbank.com
                      keyType: email
                      name: testKey
                      status: canceled
                      taxId: 012.345.678-90
                      type: ownership
                      updated: '2022-05-17T19:32:32.002810+00:00'
                    created: '2022-05-17T19:32:28.894495+00:00'
                    errors: []
                    id: '5232635437645824'
                    reason: null
                    type: canceled
                  - agent: claimer
                    claim:
                      accountCreated: '2022-02-02T02:59:59.999999+00:00'
                      accountNumber: '5692908409716736'
                      accountType: checking
                      agent: claimer
                      bankCode: '35547753'
                      branchCode: '0000'
                      claimedBankCode: '31804966'
                      claimerBankCode: '35547753'
                      created: '2022-05-17T19:31:21.972149+00:00'
                      id: '5961418104897536'
                      keyId: postmanteste@starkbank.com
                      keyType: email
                      name: testKey
                      status: delivered
                      taxId: 012.345.678-90
                      type: ownership
                      updated: '2022-05-17T19:32:32.002707+00:00'
                    created: '2022-05-17T19:32:28.706993+00:00'
                    errors: []
                    id: '6524368058318848'
                    reason: userRequested
                    type: canceling
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-claim/log/{logId}:
    get:
      operationId: getPixClaimLog
      tags:
        - Pix > Pix Claim
      summary: Get a Pix claim log by ID
      description: Get a single Pix Claim Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      claim:
                        $ref: '#/components/schemas/Claim'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                      agent:
                        type: string
                        example: "claimed"
                      reason:
                        type: string
                        example: ""
              example:
                log:
                  agent: claimer
                  claim:
                    accountCreated: '2022-02-02T02:59:59.999999+00:00'
                    accountNumber: '5692908409716736'
                    accountType: checking
                    agent: claimer
                    bankCode: '35547753'
                    branchCode: '0000'
                    claimedBankCode: '31804966'
                    claimerBankCode: '35547753'
                    created: '2022-05-17T19:31:21.972149+00:00'
                    id: '5961418104897536'
                    keyId: postmanteste@starkbank.com
                    keyType: email
                    name: testKey
                    status: canceled
                    taxId: 012.345.678-90
                    type: ownership
                    updated: '2022-05-17T19:32:32.002810+00:00'
                  created: '2022-05-17T19:32:28.894495+00:00'
                  errors: []
                  id: '5232635437645824'
                  reason: null
                  type: canceled
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-director:
    post:
      operationId: createPixDirector
      tags:
        - Pix > Pix Director
      summary: Create a Pix director
      description: >-
        Register Pix Director information at the Central Bank. This route can
        only be used by direct participants.


        |  |  |  |

        | --- | --- | --- |

        | name | REQUIRED | Pix Director's full name. Example: name="Anthony
        Edward Stark". |

        | taxId | REQUIRED | Pix Director's CPF (11 digits formatted or
        unformatted). Example: taxId="012.345.678-90". |

        | phone | REQUIRED | Pix Director's phone number. Example:
        phone="+55-11998989898". |

        | email | REQUIRED | Pix Director's email. Example:
        email="ned.stark@starkbank.com". |

        | password | REQUIRED | Pix Director's password, which must be informed
        in case Central Bank representatives get in touch. Must have exactly 8
        digits. Example: password="abcd1234" |

        | teamEmail | REQUIRED | Email of the team responsible for the Pix
        operations. Example: teamEmail="help@starkbank.com" |

        | teamPhones | REQUIRED | Phone numbers of the team's participants
        responsible for the Pix operations. Example:
        teamPhones=\["+55-11988889999", "+55-11988889998"\]  <br> |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Director'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Director'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-infraction:
    post:
      operationId: createPixInfractions
      tags:
        - Pix > Pix Infraction
      summary: Create Pix infractions
      description: >-
        Pix Infractions can be created by either participant of a transaction.
        The receiving party must answer within a specific period specified by
        the Brazilian Central Bank.


        | **Parameter** | **Value Type** | **Description** |

        | --- | --- | --- |

        | referenceId | REQUIRED | End to end id or return id of the transaction
        being reported. Example: referenceId="E20018183202201201450u34sDGd19lz"
        |

        | type | REQUIRED | Type of the Pix Infraction. Options: "fraud",
        "reversal", "reversalChargeback". |

        | description | OPTIONAL | Description for any details that can help
        with the infraction investigation. |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Infractions'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Infractions'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listPixInfractions
      tags:
        - Pix > Pix Infraction
      summary: List Pix infractions
      description: >-
        Here you can list and filter all Pix Infractions you have. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          description: Filter entities by their type.
          required: false
          schema:
            type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Infractions'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  Ck4KFAoHY3JlYXRlZBIJCJi1_ePi5vcCEjJqEWl-YXBpLW1zLWRpY3QtZGV2ch0LEhBJbmZyYWN0aW9uUmVwb3J0GICAgPjs998JDBgAIAE=
                infractions:
                  - agent: reporter
                    analysis: ''
                    bacenId: 5c166c61-50ae-4399-ad3e-12660b7548dd
                    created: '2022-05-17T19:35:05.414532+00:00'
                    creditedBankCode: '90400888'
                    debitedBankCode: '35547753'
                    description: ''
                    id: '4588746288660480'
                    referenceId: E35547753202201201450u34sDGd19l3
                    reportedBy: debited
                    result: ''
                    status: created
                    type: fraud
                    updated: '2022-05-17T19:35:08.845617+00:00'
                  - agent: reporter
                    analysis: ''
                    bacenId: d8e25aac-982f-4713-ab99-67c56c118c04
                    created: '2022-05-17T14:44:11.325080+00:00'
                    creditedBankCode: '81192106'
                    debitedBankCode: '35547753'
                    description: ''
                    id: '5488482050899968'
                    referenceId: E35547753202205101724kmMpSb0eS9b
                    reportedBy: debited
                    result: ''
                    status: canceled
                    type: fraud
                    updated: '2022-05-17T14:44:43.497703+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-infraction/{infractionId}:
    get:
      operationId: getPixInfraction
      tags:
        - Pix > Pix Infraction
      summary: Get a Pix infraction by ID
      description: Get a specific Pix Infraction by it's id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: infractionId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Infraction'
              example:
                infraction:
                  agent: reporter
                  analysis: ''
                  bacenId: 5c166c61-50ae-4399-ad3e-12660b7548dd
                  created: '2022-05-17T19:35:05.414532+00:00'
                  creditedBankCode: '90400888'
                  debitedBankCode: '35547753'
                  description: ''
                  id: '4588746288660480'
                  referenceId: E35547753202201201450u34sDGd19l3
                  reportedBy: debited
                  result: ''
                  status: created
                  type: fraud
                  updated: '2022-05-17T19:35:08.845617+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    patch:
      operationId: updatePixInfraction
      tags:
        - Pix > Pix Infraction
      summary: Update a Pix infraction by ID
      description: >-
        A received Pix Infraction can be confirmed or declined by setting its
        result. After a Pix Infraction is patched, its status changes to closed.


        | **Parameter** | **Value Type** | **Description** |

        | --- | --- | --- |

        | id | REQUIRED | Id of the Pix Infraction to be patched. Example:
        "5719405850615809" |

        | result | REQUIRED | Result after the analysis of the received Pix
        Infraction. Options: "agreed", "disagreed" |

        | analysis | OPTIONAL | Analysis that led to the result. |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - result
              properties:
                id:
                  type: string
                  example: 5719405850615809
                result:
                  type: string
                  example: agreed
                analysis:
                  type: string
                  example: Client payed for an item and never received it.
            example:
                result: reversal
                analysis: Client payed for an item and never received it.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: infractionId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Infractions'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    delete:
      operationId: cancelPixInfraction
      tags:
        - Pix > Pix Infraction
      summary: Cancel a Pix infraction by ID
      description: >-
        Cancel a specific Pix Infraction using its id. Only the reporter agent
        can cancel a Pix Infraction.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: infractionId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Infraction'
                - type: object
                properties:
                  status:
                    type: string
                    example: "canceled"
              example:
                infraction:
                  agent: reporter
                  analysis: ''
                  bacenId: 5c166c61-50ae-4399-ad3e-12660b7548dd
                  created: '2022-05-17T19:35:05.414532+00:00'
                  creditedBankCode: '90400888'
                  debitedBankCode: '35547753'
                  description: ''
                  id: '4588746288660480'
                  referenceId: E35547753202201201450u34sDGd19l3
                  reportedBy: debited
                  result: ''
                  status: canceled
                  type: fraud
                  updated: '2022-05-17T19:35:08.845617+00:00'
                message: Pix infraction cancellation successfully requested
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-infraction/log:
    get:
      operationId: listPixInfractionLogs
      tags:
        - Pix > Pix Infraction
      summary: List Pix infraction logs
      description: >-
        Here you can list and filter all Pix Infraction Logs. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: infractionIds
          in: query
          description: List of strings to get specific logs by their Pix Infraction ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      infraction:
                        $ref: '#/components/schemas/Infraction'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClEKFAoHY3JlYXRlZBIJCOrK9Oak5_cCEjVqEWl-YXBpLW1zLWRpY3QtZGV2ciALEhNJbmZyYWN0aW9uUmVwb3J0TG9nGICAgISNvKsIDBgAIAE=
                logs:
                  - created: '2022-05-17T19:40:13.028853+00:00'
                    errors: []
                    id: '5151696242081792'
                    infraction:
                      agent: reporter
                      analysis: ''
                      bacenId: 5c166c61-50ae-4399-ad3e-12660b7548dd
                      created: '2022-05-17T19:35:05.414532+00:00'
                      creditedBankCode: '90400888'
                      debitedBankCode: '35547753'
                      description: ''
                      id: '4588746288660480'
                      referenceId: E35547753202201201450u34sDGd19l3
                      reportedBy: debited
                      result: ''
                      status: canceled
                      type: fraud
                      updated: '2022-05-17T19:40:13.256549+00:00'
                    type: canceled
                  - created: '2022-05-17T19:39:34.211946+00:00'
                    errors: []
                    id: '4694780709699584'
                    infraction:
                      agent: reported
                      analysis: >-
                        Upon investigation, several identical transactions were
                        identified.
                      bacenId: 670966f5-8926-409f-85b2-e0bb5395d76f
                      created: '2022-05-12T19:08:01.294891+00:00'
                      creditedBankCode: '35547753'
                      debitedBankCode: '20018183'
                      description: ''
                      id: '5229959379419136'
                      referenceId: E20018183202204951450u34sDGd19lz
                      reportedBy: credited
                      result: agreed
                      status: closed
                      type: fraud
                      updated: '2022-05-17T19:39:34.580234+00:00'
                    type: closed
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-infraction/log/{logId}:
    get:
      operationId: getPixInfractionLog
      tags:
        - Pix > Pix Infraction
      summary: Get a Pix infraction log by ID
      description: Get a single Pix Infraction Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      infraction:
                        $ref: '#/components/schemas/Infraction'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  created: '2022-05-17T19:40:13.028853+00:00'
                  errors: []
                  id: '5151696242081792'
                  infraction:
                    agent: reporter
                    analysis: ''
                    bacenId: 5c166c61-50ae-4399-ad3e-12660b7548dd
                    created: '2022-05-17T19:35:05.414532+00:00'
                    creditedBankCode: '90400888'
                    debitedBankCode: '35547753'
                    description: ''
                    id: '4588746288660480'
                    referenceId: E35547753202201201450u34sDGd19l3
                    reportedBy: debited
                    result: ''
                    status: canceled
                    type: fraud
                    updated: '2022-05-17T19:40:13.256549+00:00'
                  type: canceled
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-chargeback:
    post:
      operationId: createPixChargebacks
      tags:
        - Pix > Pix Chargeback
      summary: Create Pix chargebacks
      description: >-
        Pix Chargebacks can only be created by the transaction's sender
        participant. The other party must answer within a specific period
        defined by the Brazilian Central Bank.


        | **Parameter** | **Valur Type** | **Description** |

        | --- | --- | --- |

        | amount | REQUIRED | Chargeback amount. Example: amount=10000. |

        | referenceId | REQUIRED | End to end id or return id of the transaction
        to be reversed. Example: referenceId="E20018183202201201450u34sDGd19lz"
        |

        | reason | REQUIRED | Reason why the chargeback was requested. Options:
        "fraud", "flaw", "reversalChargeback". |

        | description | OPTIONAL | Description for the Pix Chargeback. |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chargebacks'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chargebacks'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listPixChargebacks
      tags:
        - Pix > Pix Chargeback
      summary: List Pix chargebacks
      description: >-
        Here you can list and filter all Pix Chargebacks you have made. We
        return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Chargebacks'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                chargebacks:
                  - amount: 100
                    analysis: ''
                    bacenId: b9dd3250-0ea4-44c7-bc95-a0fb293c92be
                    created: '2022-05-17T19:43:12.382174+00:00'
                    description: Client payed for an item and never received it.
                    id: '5331161626705920'
                    reason: fraud
                    receiverBankCode: '54401286'
                    referenceId: E35547753202205101724tM25SPNVfSp
                    rejectionReason: ''
                    result: ''
                    reversalReferenceId: ''
                    senderBankCode: '35547753'
                    status: delivered
                    updated: '2022-05-17T19:43:15.628222+00:00'
                  - amount: 100
                    analysis: ''
                    bacenId: b7733ddc-12f9-4ee3-a299-10a4c4bf4b3c
                    created: '2022-05-17T19:42:55.411062+00:00'
                    description: ''
                    id: '5820680616542208'
                    reason: fraud
                    receiverBankCode: '37880206'
                    referenceId: E35547753202205101724tM25SPNVfSp
                    rejectionReason: ''
                    result: ''
                    reversalReferenceId: ''
                    senderBankCode: '35547753'
                    status: delivered
                    updated: '2022-05-17T19:42:58.915360+00:00'
                cursor: >-
                  Ck0KFAoHY3JlYXRlZBIJCPbm7Mal5_cCEjFqEWl-YXBpLW1zLWRpY3QtZGV2chwLEg9SZXZlcnNhbFJlcXVlc3QYgICAhI28qwoMGAAgAQ==
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-chargeback/{chargebackId}:
    get:
      operationId: getPixChargeback
      tags:
        - Pix > Pix Chargeback
      summary: Get a Pix chargeback by ID
      description: Get a specific Pix Chargeback by it's id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: chargebackId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chargeback'
              example:
                chargeback:
                  amount: 100
                  analysis: ''
                  bacenId: b9dd3250-0ea4-44c7-bc95-a0fb293c92be
                  created: '2022-05-17T19:43:12.382174+00:00'
                  description: Client payed for an item and never received it.
                  id: '5331161626705920'
                  reason: fraud
                  receiverBankCode: '54401286'
                  referenceId: E35547753202205101724tM25SPNVfSp
                  rejectionReason: ''
                  result: ''
                  reversalReferenceId: ''
                  senderBankCode: '35547753'
                  status: delivered
                  updated: '2022-05-17T19:43:15.628222+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    patch:
      operationId: updatePixChargeback
      tags:
        - Pix > Pix Chargeback
      summary: Update a Pix chargeback by ID
      description: >-
        A received Pix Chargeback can be confirmed or declined by setting its
        result. After a Pix Chargeback is patched, its status changes to closed.


        | **Parameter** | **Value Type** | **Description** |

        | --- | --- | --- |

        | id | REQUIRED | Id of the Pix Chargeback to be patched. Example:
        "5719405850615809" |

        | result | REQUIRED | Result after the analysis of the received Pix
        Chargebacks. Options: "rejected", "accepted", "partiallyAccepted" |

        | rejectionReason | CONDITIONALLY REQUIRED | If the Pix Chargeback is
        rejected, a reason is required. Options: "noBalance", "accountClosed",
        "unableToReverse" |

        | reversalReferenceId | CONDITIONALLY REQUIRED | Return id of the
        chargeback transaction. Required if the result is different than
        "rejected". Example: "D20018183202201201450u34sDGd19lz" |

        | analysis | OPTIONAL | Description of the analysis that led to the
        result. |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - result
                - rejectionReason
                - reversalReferenceId
              properties:
                id:
                  type: string
                  example: 5719405850615809
                result:
                  type: string
                  example: rejected
                rejectionReason:
                  type: string
                  example: noBalance
                reversalReferenceId:
                  type: string
                  example: D20018183202201201450u34sDGd19lz
                analysis:
                  type: string
                  example: Upon investigation fraud was confirmed.
            example:
                analysis: Upon investigation fraud was confirmed.
                result: rejected
                description: Client payed for an item and never received it.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: chargebackId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chargebacks'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    delete:
      operationId: cancelPixChargeback
      tags:
        - Pix > Pix Chargeback
      summary: Cancel a Pix chargeback by ID
      description: >-
        Cancel a specific Pix Chargeback using it's id. Only the participant who
        created the Pix Chargeback can cancel it.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: chargebackId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Chargeback'
                - type: object
                properties:
                  status:
                    type: string
                    example: "canceled"
              example:
                chargeback:
                  amount: 100
                  analysis: ''
                  bacenId: b9dd3250-0ea4-44c7-bc95-a0fb293c92be
                  created: '2022-05-17T19:43:12.382174+00:00'
                  description: Client payed for an item and never received it.
                  id: '5331161626705920'
                  reason: fraud
                  receiverBankCode: '54401286'
                  referenceId: E35547753202205101724tM25SPNVfSp
                  rejectionReason: ''
                  result: ''
                  reversalReferenceId: ''
                  senderBankCode: '35547753'
                  status: canceled
                  updated: '2022-05-17T19:43:15.628222+00:00'
                message: Pix chargeback cancellation successfully requested
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-chargeback/log:
    get:
      tags:
      - Pix > Pix Chargeback
      operationId: listPixChargebackLogs
        - Pix > Pix Chargeback
      summary: List Pix chargeback logs
      description: >-
        Here you can list and filter all Pix Chargeback Logs. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: chargebackIds
          in: query
          description: List of strings to get specific logs by their Pix Chargeback ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      chargeback:
                        $ref: '#/components/schemas/Chargeback'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClAKFAoHY3JlYXRlZBIJCJSQ6POn5_cCEjRqEWl-YXBpLW1zLWRpY3QtZGV2ch8LEhJSZXZlcnNhbFJlcXVlc3RMb2cYgICA-OyPsAgMGAAgAQ==
                logs:
                  - chargeback:
                      amount: 100
                      analysis: ''
                      bacenId: b9dd3250-0ea4-44c7-bc95-a0fb293c92be
                      created: '2022-05-17T19:43:12.382174+00:00'
                      description: Client payed for an item and never received it.
                      id: '5331161626705920'
                      reason: fraud
                      receiverBankCode: '54401286'
                      referenceId: E35547753202205101724tM25SPNVfSp
                      rejectionReason: ''
                      result: ''
                      reversalReferenceId: ''
                      senderBankCode: '35547753'
                      status: canceled
                      updated: '2022-05-17T19:55:42.948866+00:00'
                    created: '2022-05-17T19:55:42.534512+00:00'
                    errors: []
                    id: '5818581719711744'
                    type: canceled
                  - chargeback:
                      amount: 10000
                      analysis: ''
                      bacenId: af9cffdb-c8ca-4b30-9eab-f69093751690
                      created: '2022-05-17T19:52:40.057934+00:00'
                      description: Client payed for an item and never received it.
                      id: '5418937940443136'
                      reason: fraud
                      receiverBankCode: '09313766'
                      referenceId: E20018183202201201450u34sDGd19lz
                      rejectionReason: ''
                      result: ''
                      reversalReferenceId: ''
                      senderBankCode: '35547753'
                      status: canceled
                      updated: '2022-05-17T19:53:26.838543+00:00'
                    created: '2022-05-17T19:53:26.577172+00:00'
                    errors: []
                    id: '4715250498666496'
                    type: canceled
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-chargeback/log/{logId}:
    get:
      operationId: getPixChargebackLogs
      tags:
        - Pix > Pix Chargeback
      summary: Get a Pix chargeback log by ID
      description: Get a single Pix Chargeback Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      chargeback:
                        $ref: '#/components/schemas/Chargeback'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  chargeback:
                    amount: 10000
                    analysis: ''
                    bacenId: af9cffdb-c8ca-4b30-9eab-f69093751690
                    created: '2022-05-17T19:52:40.057934+00:00'
                    description: Client payed for an item and never received it.
                    id: '5418937940443136'
                    reason: fraud
                    receiverBankCode: '09313766'
                    referenceId: E20018183202201201450u34sDGd19lz
                    rejectionReason: ''
                    result: ''
                    reversalReferenceId: ''
                    senderBankCode: '35547753'
                    status: canceled
                    updated: '2022-05-17T19:53:26.838543+00:00'
                  created: '2022-05-17T19:53:26.577172+00:00'
                  errors: []
                  id: '4715250498666496'
                  type: canceled
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/pix-domain:
    get:
      operationId: listPixDomains
      tags:
        - Pix > Pix Domain
      summary: List Pix domain
      description: >-
        Here you can list all Pix Domains registered at the Brazilian Central
        Bank.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Domains'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                domains:
                  - certificates:
                      - content: >
                          -----BEGIN CERTIFICATE-----

                          MIIG/TCCBeWgAwIBAgIQDf12Gq ... SeLP+POvEIiZYh4rRTwbVHM=

                          -----END CERTIFICATE-----
                    name: api-h.banrisul.com.br
                  - certificates:
                      - content: >
                          -----BEGIN CERTIFICATE-----

                          MIIG/TCCBeWgAwIBAgIQDf12Gq ... SeLP+POvEIiZYh4rRTwbVHM=

                          -----END CERTIFICATE-----
                    name: qrcodes-pix-h.gerencianet.com.br
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-balance:
    get:
      operationId: listIssuingBalances
      tags:
        - Issuing > Issuing Balance
      summary: List issuing balances
      description: >-
        Get the current Issuing Balance in your workspace.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/IssuingBalance'
                  - type: object
                properties:
                    cursor:
                      type: string
                      example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                balances:
                  - amount: 4192241
                    currency: BRL
                    id: '5714296759648256'
                    updated: '2022-05-17T18:21:02.199759+00:00'
                cursor: null
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-bin:
    get:
      operationId: listIssuingBins
      tags:
        - Issuing > Issuing Bin
      summary: List issuing bins
      description: >-
        Here you can list and filter all Issuing Bins you have. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Bin'
                  - type: object
                properties:
                    cursor:
                      type: string
                      example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                bins:
                  - category: prepaid
                    client: business
                    created: '2022-05-01T18:58:00+00:00'
                    id: '53810203'
                    network: mastercard
                    settlement: credit
                    updated: '2022-05-01T18:58:00+00:00'
                  - category: prepaid
                    client: business
                    created: '2022-05-01T18:57:00+00:00'
                    id: '53810202'
                    network: mastercard
                    settlement: credit
                    updated: '2022-05-01T18:57:00+00:00'
                cursor: null
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-card:
    post:
      operationId: createIssuingCards
      tags:
        - Issuing > Issuing Card
      summary: Create issuing cards
      description: >-
        Create Issuing Cards with specific spending rules.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | holderName | REQUIRED | Cardholder's name. Example: name="Tony Stark"
        |

        | holderTaxId | REQUIRED | Cardholder's CPF (11 digits formatted or
        unformatted) or CNPJ (14 digits formatted or unformatted). Example:
        holderTaxId="012.345.678-90" |

        | holderExternalId | REQUIRED | Cardholder's unique id, generated by the
        user to avoid duplicated holders. Example: "my-entity/123" |

        | displayName | OPTIONAL | Card display name. Example:
        displayName="ANTHONY STARK". |

        | rules | OPTIONAL | Spending rules for the Issuing Card. List of
        dictionaries or a list of Issuing Rule objects containing: amount,
        currencyCode, id, interval and name. |

        | binId | OPTIONAL | Bin id to which the card is bound. Example:
        binId="538102". |

        | tags | OPTIONAL | List of strings for tagging. All tags will be
        converted to lowercase. Example: tags=\["travel", "food"\]. |

        | streetLine1 | OPTIONAL | Cardholder's main address. Example:
        streetLine1="Av. Paulista, 200". |

        | streetLine2 | OPTIONAL | Cardholder's address complement. Example:
        streetLine2="Apto. 123". |

        | district | OPTIONAL | Cardholder's address district / neighbourhood.
        Example: district="Bela Vista". |

        | city | OPTIONAL | Cardholder's address city. Example: district="Sao
        Paulo". |

        | stateCode | OPTIONAL | Cardholder's address state code. Example:
        stateCode="SP". |

        | zipCode | OPTIONAL | Cardholder's address zip code. Example:
        zipCode="01311-200". |
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cards'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cards'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listIssuingCards
      tags:
        - Issuing > Issuing Card
      summary: List issuing cards
      description: >-
        Here you can list and filter all Issuing Cards you have. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: types
          in: query
          description: Filter entities by their type.
          required: false
          schema:
            type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: Filter entities that contain specific tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: holderId
          in: query
          description: Filter entities by their Pix Key id.
          required: false
          schema:
            type: string
        - name: expand
          in: query
          description: Fields to expand information.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Cards'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cards:
                  - binId: '53810202'
                    city: Sao Paulo
                    created: '2022-05-17T20:00:37.619527+00:00'
                    displayName: ANTHONY STARK
                    district: Bela Vista
                    expiration: '****-**-**T**:**:**.******+00:00'
                    holderExternalId: my-entity/123
                    holderId: '4843929958612992'
                    holderName: Tony Stark
                    holderTaxId: 012.345.678-90
                    id: '5701684319748096'
                    number: '**** **** **** 3714'
                    rules:
                      - amount: 900000
                        currencyCode: BRL
                        id: '5138734366326784'
                        interval: week
                        name: Example Rule
                    securityCode: '***'
                    stateCode: SP
                    status: active
                    streetLine1: Av. Paulista, 200
                    streetLine2: Apto. 123
                    tags:
                      - travel
                      - food
                    type: virtual
                    updated: '2022-05-17T20:00:38.058520+00:00'
                    zipCode: 01311-200
                  - binId: '53810202'
                    city: Sao Paulo
                    created: '2022-05-17T18:18:21.162200+00:00'
                    displayName: ANTHONY STARK
                    district: Bela Vista
                    expiration: '****-**-**T**:**:**.******+00:00'
                    holderExternalId: '500738'
                    holderId: '6145137520410624'
                    holderName: Holder Test
                    holderTaxId: 012.345.678-90
                    id: '5619061027241984'
                    number: '**** **** **** 4520'
                    rules:
                      - amount: 900000
                        currencyCode: BRL
                        id: '6744960934084608'
                        interval: week
                        name: Example Rule
                    securityCode: '***'
                    stateCode: SP
                    status: canceled
                    streetLine1: Av. Paulista, 200
                    streetLine2: Apto. 123
                    tags:
                      - travel
                      - food
                    type: virtual
                    updated: '2022-05-17T18:18:23.332977+00:00'
                    zipCode: 01311-200
                cursor: >-
                  ClAKFAoHY3JlYXRlZBIJCNidodOS5_cCEjRqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIYCxILSXNzdWluZ0NhcmQYgICAxJnQ_QkMGAAgAQ==
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-card/{cardId}:
    get:
      operationId: getIssuingCard
      tags:
        - Issuing > Issuing Card
      summary: Get an issuing card by ID
      description: Get a specific Issuing Card by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cardId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: expand
          in: query
          description: Fields to expand information.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
              example:
                card:
                  binId: '53810202'
                  city: Sao Paulo
                  created: '2022-05-17T20:00:37.619527+00:00'
                  displayName: ANTHONY STARK
                  district: Bela Vista
                  expiration: '****-**-**T**:**:**.******+00:00'
                  holderExternalId: my-entity/123
                  holderId: '4843929958612992'
                  holderName: Tony Stark
                  holderTaxId: 012.345.678-90
                  id: '5701684319748096'
                  number: '**** **** **** 3714'
                  rules:
                    - amount: 900000
                      currencyCode: BRL
                      id: '5138734366326784'
                      interval: week
                      name: Example Rule
                  securityCode: '***'
                  stateCode: SP
                  status: active
                  streetLine1: Av. Paulista, 200
                  streetLine2: Apto. 123
                  tags:
                    - travel
                    - food
                  type: virtual
                  updated: '2022-05-17T20:00:38.058520+00:00'
                  zipCode: 01311-200
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    patch:
      operationId: updateIssuingCard
      tags:
        - Issuing > Issuing Card
      summary: Update an issuing card by ID
      description: >-
        You can update an Issuing Card to block it, to change spending rules or
        to change registered information.


        | **Parameters** | **Value Type** | **Description** |

        | --- | --- | --- |

        | id | REQUIRED | Id of the Issuing Card to be patched. |

        | status | OPTIONAL | You may block the Issuing Card by passing
        "blocked" in the status or you may reactivate a blocked Issuing Card by
        passing "active" in the status. |

        | displayName | OPTIONAL | Card displayed name. |

        | rules | OPTIONAL | New spending rules for the Issuing Card. |

        | tags | OPTIONAL | List of strings for tagging. |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  example: rejected
                status:
                  type: string
                  example: blocked
                displayName:
                  type: string
                rules:
                  type: string
                tags:
                  items:
                    type: string
            example:
                status: blocked
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cardId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cards'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    delete:
      operationId: cancelIssuingCard
      tags:
        - Issuing > Issuing Card
      summary: Cancel an issuing card by ID
      description: Cancel a single Issuing Card.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cardId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: expand
          in: query
          description: Fields to expand information.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Card'
                - type: object
                properties:
                  status:
                    type: string
                    example: "canceled"
              example:
                card:
                  binId: '53810202'
                  city: Sao Paulo
                  created: '2022-05-17T20:00:37.619527+00:00'
                  displayName: Updated Holder
                  district: Bela Vista
                  expiration: '****-**-**T**:**:**.******+00:00'
                  holderExternalId: my-entity/123
                  holderId: '4843929958612992'
                  holderName: Tony Stark
                  holderTaxId: 012.345.678-90
                  id: '5701684319748096'
                  number: '**** **** **** 3714'
                  rules:
                    - amount: 900000
                      currencyCode: BRL
                      id: '6533407823626240'
                      interval: week
                      name: Example Rule
                  securityCode: '***'
                  stateCode: SP
                  status: canceled
                  streetLine1: Av. Paulista, 200
                  streetLine2: Apto. 123
                  tags:
                    - technology
                  type: virtual
                  updated: '2022-05-17T20:01:37.045064+00:00'
                  zipCode: 01311-200
                message: Card successfully updated
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-card/log:
    get:
      operationId: listIssuingCardLogs
      tags:
        - Issuing > Issuing Card
      summary: List issuing card logs
      description: Here you can list and filter all Issuing Card Logs. We return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: cardIds
          in: query
          description: List of strings to get specific logs by their Issuing Card ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      card:
                        $ref: '#/components/schemas/Card'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClMKFAoHY3JlYXRlZBIJCN7Qmdip5_cCEjdqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIbCxIOSXNzdWluZ0NhcmRMb2cYgICA5JjDrQgMGAAgAQ==
                logs:
                  - card:
                      binId: '53810202'
                      city: Sao Paulo
                      created: '2022-05-17T20:00:37.619527+00:00'
                      displayName: Updated Holder
                      district: Bela Vista
                      expiration: '****-**-**T**:**:**.******+00:00'
                      holderExternalId: my-entity/123
                      holderId: '4843929958612992'
                      holderName: Tony Stark
                      holderTaxId: 012.345.678-90
                      id: '5701684319748096'
                      number: '**** **** **** 3714'
                      rules:
                        - amount: 900000
                          currencyCode: BRL
                          id: '6533407823626240'
                          interval: week
                          name: Example Rule
                      securityCode: '***'
                      stateCode: SP
                      status: canceled
                      streetLine1: Av. Paulista, 200
                      streetLine2: Apto. 123
                      tags:
                        - technology
                      type: virtual
                      updated: '2022-05-17T20:01:38.636960+00:00'
                      zipCode: 01311-200
                    created: '2022-05-17T20:01:37.012860+00:00'
                    id: '5716316736454656'
                    type: canceled
                  - card:
                      binId: '53810202'
                      city: Sao Paulo
                      created: '2022-05-17T20:00:37.619527+00:00'
                      displayName: Updated Holder
                      district: Bela Vista
                      expiration: '****-**-**T**:**:**.******+00:00'
                      holderExternalId: my-entity/123
                      holderId: '4843929958612992'
                      holderName: Tony Stark
                      holderTaxId: 012.345.678-90
                      id: '5701684319748096'
                      number: '**** **** **** 3714'
                      rules:
                        - amount: 900000
                          currencyCode: BRL
                          id: '6533407823626240'
                          interval: week
                          name: Example Rule
                      securityCode: '***'
                      stateCode: SP
                      status: active
                      streetLine1: Av. Paulista, 200
                      streetLine2: Apto. 123
                      tags:
                        - technology
                      type: virtual
                      updated: '2022-05-17T20:01:38.636125+00:00'
                      zipCode: 01311-200
                    created: '2022-05-17T20:01:25.538910+00:00'
                    id: '4703820475006976'
                    type: updated
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-card/log/{logId}:
    get:
      operationId: getIssuingCardLog
      tags:
        - Issuing > Issuing Card
      summary: Get an issuing card log by ID
      description: Get a single Issuing Card Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      card:
                        $ref: '#/components/schemas/Card'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  card:
                    binId: '53810202'
                    city: Sao Paulo
                    created: '2022-05-17T20:00:37.619527+00:00'
                    displayName: Updated Holder
                    district: Bela Vista
                    expiration: '****-**-**T**:**:**.******+00:00'
                    holderExternalId: my-entity/123
                    holderId: '4843929958612992'
                    holderName: Tony Stark
                    holderTaxId: 012.345.678-90
                    id: '5701684319748096'
                    number: '**** **** **** 3714'
                    rules:
                      - amount: 900000
                        currencyCode: BRL
                        id: '6533407823626240'
                        interval: week
                        name: Example Rule
                    securityCode: '***'
                    stateCode: SP
                    status: canceled
                    streetLine1: Av. Paulista, 200
                    streetLine2: Apto. 123
                    tags:
                      - technology
                    type: virtual
                    updated: '2022-05-17T20:01:38.636960+00:00'
                    zipCode: 01311-200
                  created: '2022-05-17T20:01:37.012860+00:00'
                  id: '5716316736454656'
                  type: canceled
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-holder:
    post:
      operationId: createIssuingHolders
      tags:
        - Issuing > Issuing Holder
      summary: Create issuing holders
      description: >-
        You can create cardholders to which your cards will be bound when
        created.They support spending rules that will apply to all underlying
        cards.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | name | REQUIRED | Cardholder's name. |

        | taxId | REQUIRED | Cardholder's CPF (11 digits formatted or
        unformatted) or CNPJ (14 digits formatted or unformatted). |

        | externalId | REQUIRED | Cardholder's unique id, generated by the
        sub-issuer, to avoid duplicated holders. |

        | rules | OPTIONAL | List of spending rules for the cardholder. List of
        dictionaries or a list of Issuing Rule objects containing: amount,
        currencyCode, id, interval and name. |

        | tags | OPTIONAL | List of strings for tagging. All tags will be
        converted to lowercase. |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Holders'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: expand
          in: query
          description: Fields to expand information.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holders'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listIssuingHolders
      tags:
        - Issuing > Issuing Holder
      summary: List issuing holders
      description: >-
        Here you can list and filter all Issuing Holders you have. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: Filter entities that contain specific tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: expand
          in: query
          description: Fields to expand information.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Holders'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClIKFAoHY3JlYXRlZBIJCNjy3NGS5_cCEjZqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIaCxINSXNzdWluZ0hvbGRlchiAgICk3p3hCAwYACAB
                holders:
                  - created: '2022-05-17T20:03:05.939249+00:00'
                    externalId: '123456789'
                    id: '5055990386917376'
                    name: Jamie Lannister
                    rules:
                      - amount: 900000
                        currencyCode: BRL
                        id: '6181890293760000'
                        interval: week
                        name: Example Rule
                    status: active
                    tags:
                      - iron
                      - bank
                    taxId: 012.345.678-90
                    updated: '2022-05-17T20:03:06.082272+00:00'
                  - created: '2022-05-17T18:18:17.945432+00:00'
                    externalId: 01e2fe69-2abb-47a0-b791-e00143962073
                    id: '4931231879790592'
                    name: Iron Bank S.A.
                    rules:
                      - amount: 100000
                        currencyCode: USD
                        id: '6057131786633216'
                        interval: day
                        name: General USD
                    status: canceled
                    tags:
                      - traveler employee
                    taxId: 012.345.678-90
                    updated: '2022-05-17T18:18:19.736582+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-holder/{holderId}:
    get:
      operationId: getIssuingHolder
      tags:
        - Issuing > Issuing Holder
      summary: Get an issuing holder by ID
      description: Get a specific Issuing Holder by its id.
      parameters:
        - name: holderId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: expand
          in: query
          description: Fields to expand information.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holder'
              example:
                holder:
                  created: '2022-05-17T20:03:05.939249+00:00'
                  externalId: '123456789'
                  id: '5055990386917376'
                  name: Jamie Lannister
                  rules:
                    - amount: 900000
                      currencyCode: BRL
                      id: '6181890293760000'
                      interval: week
                      name: Example Rule
                  status: active
                  tags:
                    - iron
                    - bank
                  taxId: 012.345.678-90
                  updated: '2022-05-17T20:03:06.082272+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    patch:
      operationId: updateIssuingHolder
      tags:
        - Issuing > Issuing Holder
      summary: Update an issuing holder by ID
      description: >-
        You can update an Issuing Holder to block a cardholder, to change
        spending rules or to change registered information.


        | **Parameters** | **Type Value** | **Description** |

        | --- | --- | --- |

        | id | REQUIRED | Id of the Issuing Holder to be patched. |

        | status | OPTIONAL | You may block the Issuing Holder by passing
        "blocked" in the status or you may reactivate a blocked Issuing Holder
        by passing "active" in the status. |

        | name | OPTIONAL | Holder's display name. |

        | rules | OPTIONAL | Spending rules for the Issuing Holder. |

        | tags | OPTIONAL | List of strings for tagging. |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  example: rejected
                status:
                  type: string
                  example: blocked
                name:
                  type: string
                rules:
                  type: string
                tags:
                  items:
                    type: string
            example:
                status: blocked
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: holderId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holders'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    delete:
      operationId: cancelIssuingHolder
      tags:
        - Issuing > Issuing Holder
      summary: Cancel an issuing holder by ID
      description: Cancel a single Issuing Holder.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: holderId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Holder'
                - type: object
                properties:
                  status:
                    type: string
                    example: "canceled"
              example:
                holder:
                  created: '2022-05-17T20:03:05.939249+00:00'
                  externalId: '123456789'
                  id: '5055990386917376'
                  name: Updated Holder
                  rules:
                    - amount: 900000
                      currencyCode: BRL
                      id: '4826637614972928'
                      interval: week
                      name: Example Rule
                  status: canceled
                  tags:
                    - food
                  taxId: 012.345.678-90
                  updated: '2022-05-17T20:05:12.888972+00:00'
                message: This card holder is already canceled
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-holder/log:
    get:
      operationId: listIssuingHolderLogs
      tags:
        - Issuing > Issuing Holder
      summary: List issuing holder logs
      description: >-
        Here you can list and filter all Issuing Holder Logs. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: holderIds
          in: query
          description: List of strings to get specific logs by their Issuing Holder ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      holder:
                        $ref: '#/components/schemas/Holder'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClUKFAoHY3JlYXRlZBIJCKGLrLuq5_cCEjlqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIdCxIQSXNzdWluZ0hvbGRlckxvZxiAgICk0rnJCgwYACAB
                logs:
                  - created: '2022-05-17T20:05:12.823675+00:00'
                    holder:
                      created: '2022-05-17T20:03:05.939249+00:00'
                      externalId: '123456789'
                      id: '5055990386917376'
                      name: Updated Holder
                      rules:
                        - amount: 900000
                          currencyCode: BRL
                          id: '4826637614972928'
                          interval: week
                          name: Example Rule
                      status: canceled
                      tags:
                        - food
                      taxId: 012.345.678-90
                      updated: '2022-05-17T20:05:13.124626+00:00'
                    id: '6321804045975552'
                    type: canceled
                  - created: '2022-05-17T20:04:53.459361+00:00'
                    holder:
                      created: '2022-05-17T20:03:05.939249+00:00'
                      externalId: '123456789'
                      id: '5055990386917376'
                      name: Updated Holder
                      rules:
                        - amount: 900000
                          currencyCode: BRL
                          id: '4826637614972928'
                          interval: week
                          name: Example Rule
                      status: active
                      tags:
                        - food
                      taxId: 012.345.678-90
                      updated: '2022-05-17T20:05:13.124942+00:00'
                    id: '5952537521815552'
                    type: updated
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-holder/log/{logId}:
    get:
      operationId: getIssuingHolderLog
      tags:
        - Issuing > Issuing Holder
      summary: Get an issuing holder log by ID
      description: Get a single Issuing Holder Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      holder:
                        $ref: '#/components/schemas/Holder'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  created: '2022-05-17T20:04:53.459361+00:00'
                  holder:
                    created: '2022-05-17T20:03:05.939249+00:00'
                    externalId: '123456789'
                    id: '5055990386917376'
                    name: Updated Holder
                    rules:
                      - amount: 900000
                        currencyCode: BRL
                        id: '4826637614972928'
                        interval: week
                        name: Example Rule
                    status: active
                    tags:
                      - food
                    taxId: 012.345.678-90
                    updated: '2022-05-17T20:05:13.124942+00:00'
                  id: '5952537521815552'
                  type: updated
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-invoice:
    post:
      operationId: createIssuingInvoice
      tags:
        - Issuing > Issuing Invoice
      summary: Create an issuing invoice
      description: >-
        Create an Issuing Invoice to add cash to your Issuing Balance.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | amount | REQUIRED | A non-negative integer that represents the amount
        in cents to be added to your Issuing Balance. Example: amount=100
        (R$1.00). |

        | taxId | OPTIONAL | Payer CPF (11 digits formatted or unformatted) or
        CNPJ (14 digits formatted or unformatted). |

        | name | OPTIONAL | Payer full name |

        | tags | OPTIONAL | List of strings to tag the entity for future
        queries. All tags will be converted to lowercase |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuingInvoice'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuingInvoice'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listIssuingInvoices
      tags:
        - Issuing > Issuing Invoice
      summary: List issuing invoices
      description: >-
        Here you can list and filter all Issuing Invoices you have made. We
        return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: Filter entities that contain specific tags.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/IssuingInvoices'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClMKFAoHY3JlYXRlZBIJCLadk9OS5_cCEjdqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIbCxIOSXNzdWluZ0ludm9pY2UYgICApK3x1wkMGAAgAQ==
                invoices:
                  - amount: 1000
                    brcode: >-
                      00020101021226930014br.gov.bcb.pix2571invoice-h.development.starkbank.com/v2/99dd6b55a515467d9fe47c6330aa0ed95204000053039865802BR5925Stark
                      Bank S.A. - Institu6009Sao Paulo62070503***6304D1FB
                    created: '2022-05-17T20:06:11.895751+00:00'
                    due: '2022-05-24T20:06:11.923645+00:00'
                    id: '6329614553055232'
                    issuingTransactionId: null
                    link: >-
                      https://starkbank-card-issuer.development.starkbank.com/invoicelink/99dd6b55a515467d9fe47c6330aa0ed9
                    name: Lamie Lannister
                    status: created
                    tags:
                      - iron
                      - bank
                    taxId: 20.018.183/0001-80
                    updated: '2022-05-17T20:06:16.784144+00:00'
                  - amount: 10000
                    brcode: >-
                      00020101021226930014br.gov.bcb.pix2571invoice-h.development.starkbank.com/v2/abb8c90c6b3e4b00a3ff223e626985a15204000053039865802BR5925Stark
                      Bank S.A. - Institu6009Sao Paulo62070503***630422DB
                    created: '2022-05-17T18:18:20.932790+00:00'
                    due: '2022-05-24T18:18:20.959304+00:00'
                    id: '5453074432786432'
                    issuingTransactionId: '6017752305238016'
                    link: >-
                      https://starkbank-card-issuer.development.starkbank.com/invoicelink/abb8c90c6b3e4b00a3ff223e626985a1
                    name: Stark Bank S.A. - Instituicao de Pagamento
                    status: paid
                    tags: []
                    taxId: 20.018.183/0001-80
                    updated: '2022-05-17T18:21:02.398275+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-invoice/{invoiceId}:
    get:
      operationId: getIssuingInvoice
      tags:
        - Issuing > Issuing Invoice
      summary: Get an issuing invoice by ID
      description: Get a single Issuing Invoice by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: invoiceId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuingInvoice'
              example:
                invoice:
                  amount: 10000
                  brcode: >-
                    00020101021226930014br.gov.bcb.pix2571invoice-h.development.starkbank.com/v2/abb8c90c6b3e4b00a3ff223e626985a15204000053039865802BR5925Stark
                    Bank S.A. - Institu6009Sao Paulo62070503***630422DB
                  created: '2022-05-17T18:18:20.932790+00:00'
                  due: '2022-05-24T18:18:20.959304+00:00'
                  id: '5453074432786432'
                  issuingTransactionId: '6017752305238016'
                  link: >-
                    https://starkbank-card-issuer.development.starkbank.com/invoicelink/abb8c90c6b3e4b00a3ff223e626985a1
                  name: Stark Bank S.A. - Instituicao de Pagamento
                  status: paid
                  tags: []
                  taxId: 20.018.183/0001-80
                  updated: '2022-05-17T18:21:02.398275+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-invoice/log:
    get:
      operationId: listIssuingInvoiceLogs
      tags:
        - Issuing > Issuing Invoice
      summary: List issuing invoice logs
      description: >-
        Here you can list and filter all Issuing Invoice Logs. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      invoice:
                        $ref: '#/components/schemas/IssuingInvoice'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClYKFAoHY3JlYXRlZBIJCKH_w6CT5_cCEjpqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIeCxIRSXNzdWluZ0ludm9pY2VMb2cYgICA5JjDzQkMGAAgAQ==
                logs:
                  - created: '2022-05-17T20:06:12.361877+00:00'
                    id: '4922239669501952'
                    invoice:
                      amount: 1000
                      brcode: >-
                        00020101021226930014br.gov.bcb.pix2571invoice-h.development.starkbank.com/v2/99dd6b55a515467d9fe47c6330aa0ed95204000053039865802BR5925Stark
                        Bank S.A. - Institu6009Sao Paulo62070503***6304D1FB
                      created: '2022-05-17T20:06:11.895751+00:00'
                      due: '2022-05-24T20:06:11.923645+00:00'
                      id: '6329614553055232'
                      issuingTransactionId: null
                      link: >-
                        https://starkbank-card-issuer.development.starkbank.com/invoicelink/99dd6b55a515467d9fe47c6330aa0ed9
                      name: Lamie Lannister
                      status: created
                      tags:
                        - iron
                        - bank
                      taxId: 20.018.183/0001-80
                      updated: '2022-05-17T20:06:16.818940+00:00'
                    type: created
                  - created: '2022-05-17T18:21:03.212449+00:00'
                    id: '5407507916783616'
                    invoice:
                      amount: 10000
                      brcode: >-
                        00020101021226930014br.gov.bcb.pix2571invoice-h.development.starkbank.com/v2/99d559fa364343ea99d7f194ed2b67dc5204000053039865802BR5925Stark
                        Bank S.A. - Institu6009Sao Paulo62070503***6304B085
                      created: '2022-05-17T18:12:56.337755+00:00'
                      due: '2022-05-24T18:12:56.357590+00:00'
                      id: '5212706856501248'
                      issuingTransactionId: '5694751571443712'
                      link: >-
                        https://starkbank-card-issuer.development.starkbank.com/invoicelink/99d559fa364343ea99d7f194ed2b67dc
                      name: Stark Bank S.A. - Instituicao de Pagamento
                      status: paid
                      tags: []
                      taxId: 20.018.183/0001-80
                      updated: '2022-05-17T18:21:06.315262+00:00'
                    type: credited
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-invoice/log/{logId}:
    get:
      operationId: getIssuingInvoiceLog
      tags:
        - Issuing > Issuing Invoice
      summary: Get an issuing invoice log by ID
      description: Get a single Issuing Invoice Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      invoice:
                        $ref: '#/components/schemas/IssuingInvoice'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  created: '2022-05-17T18:21:03.212449+00:00'
                  id: '5407507916783616'
                  invoice:
                    amount: 10000
                    created: '2022-05-17T18:12:56.337755+00:00'
                    id: '5212706856501248'
                    issuingTransactionId: '5694751571443712'
                    status: paid
                    tags: []
                    taxId: 20.018.183/0001-80
                    updated: '2022-05-17T18:21:06.315262+00:00'
                  type: credited
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-purchase:
    get:
      operationId: listIssuingPurchases
      tags:
        - Issuing > Issuing Purchase
      summary: List issuing purchases
      description: >-
        Here you can list and filter all Issuing Purchases you have under your
        sub-issuer. We return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: holderIds
          in: query
          description: List of strings to filter Issuing Purchases by cardholder's ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: cardIds
          in: query
          description: List of strings to filter Issuing Purchases by Issuing Card ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: endToEndIds
          in: query
          description: List of strings to filter Issuing Purchases by endToEndIds.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Purchases'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: null
                purchases:
                  - acquirerId: '35016'
                    amount: 1300
                    cardEnding: '5255'
                    cardId: '6492113835393024'
                    created: '2022-05-17T22:12:13.205801+00:00'
                    endToEndId: 18d87d1a-09f2-40cf-8f6e-0c96a431c2d3
                    holderName: Tony Stark
                    id: '5029260213354496'
                    issuerAmount: 1300
                    issuerCurrencyCode: BRL
                    issuerCurrencySymbol: R$
                    issuingTransactionIds:
                      - '6155160120197120'
                    merchantAmount: 1300
                    merchantCategoryCode: fastFoodRestaurants
                    merchantCountryCode: BRA
                    merchantCurrencyCode: BRL
                    merchantCurrencySymbol: R$
                    merchantFee: 0
                    merchantId: '478093973800893'
                    merchantName: TESTE DO JOAO
                    methodCode: token
                    purpose: purchase
                    score: null
                    status: confirmed
                    tags:
                      - customer-purchase-order/ditto
                    tax: 0
                    updated: '2022-05-17T23:00:45.800490+00:00'
                    walletId: ''
                    zipCode: '02101234'
                  - acquirerId: '306487'
                    amount: 1200
                    cardEnding: '5255'
                    cardId: '6492113835393024'
                    created: '2022-05-17T22:11:57.298155+00:00'
                    endToEndId: 6a8af4f5-fb14-49cb-9fb0-754adf5fd255
                    holderName: Tony Stark
                    id: '6204168180072448'
                    issuerAmount: 1200
                    issuerCurrencyCode: BRL
                    issuerCurrencySymbol: R$
                    issuingTransactionIds:
                      - '4796793296519168'
                    merchantAmount: 1200
                    merchantCategoryCode: fastFoodRestaurants
                    merchantCountryCode: BRA
                    merchantCurrencyCode: BRL
                    merchantCurrencySymbol: R$
                    merchantFee: 0
                    merchantId: '671957775124999'
                    merchantName: TESTE DO JOAO
                    methodCode: token
                    purpose: purchase
                    score: null
                    status: confirmed
                    tags:
                      - customer-purchase-order/ditto
                    tax: 0
                    updated: '2022-05-17T23:00:48.438638+00:00'
                    walletId: ''
                    zipCode: '02101234'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-purchase/{purchaseId}:
    get:
      operationId: getIssuingPurchase
      tags:
        - Issuing > Issuing Purchase
      summary: Get an issuing purchase by ID
      description: Get a single issuing Purchase by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: purchaseId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
              example:
                purchase:
                  acquirerId: '35016'
                  amount: 1300
                  cardEnding: '5255'
                  cardId: '6492113835393024'
                  created: '2022-05-17T22:12:13.205801+00:00'
                  endToEndId: 18d87d1a-09f2-40cf-8f6e-0c96a431c2d3
                  holderName: Tony Stark
                  id: '5029260213354496'
                  issuerAmount: 1300
                  issuerCurrencyCode: BRL
                  issuerCurrencySymbol: R$
                  issuingTransactionIds:
                    - '6155160120197120'
                  merchantAmount: 1300
                  merchantCategoryCode: fastFoodRestaurants
                  merchantCountryCode: BRA
                  merchantCurrencyCode: BRL
                  merchantCurrencySymbol: R$
                  merchantFee: 0
                  merchantId: '478093973800893'
                  merchantName: TESTE DO JOAO
                  methodCode: token
                  purpose: purchase
                  score: null
                  status: confirmed
                  tags:
                    - customer-purchase-order/ditto
                  tax: 0
                  updated: '2022-05-17T23:00:45.800490+00:00'
                  walletId: ''
                  zipCode: '02101234'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-purchase/log:
    get:
      operationId: listIssuingPurchaseLogs
      tags:
        - Issuing > Issuing Purchase
      summary: List issuing purchase logs
      description: >-
        Here you can list and filter all Issuing Purchase Logs. We return it
        paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: purchaseIds
          in: query
          description: List of strings to get specific logs by their Issuing Purchase ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      purchase:
                        $ref: '#/components/schemas/Purchase'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClcKFAoHY3JlYXRlZBIJCP2VktTR5_cCEjtqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIfCxISSXNzdWluZ1B1cmNoYXNlTG9nGICAgOTT1poKDBgAIAE=
                logs:
                  - created: '2022-05-17T23:00:16.807417+00:00'
                    errors: []
                    id: '4875182556577792'
                    issuingTransactionId: ''
                    purchase:
                      acquirerId: '306487'
                      amount: 1200
                      cardEnding: '5255'
                      cardId: '6492113835393024'
                      created: '2022-05-17T22:11:57.298155+00:00'
                      endToEndId: 6a8af4f5-fb14-49cb-9fb0-754adf5fd255
                      holderName: Tony Stark
                      id: '6204168180072448'
                      issuerAmount: 1200
                      issuerCurrencyCode: BRL
                      issuerCurrencySymbol: R$
                      issuingTransactionIds:
                        - '4796793296519168'
                      merchantAmount: 1200
                      merchantCategoryCode: fastFoodRestaurants
                      merchantCountryCode: BRA
                      merchantCurrencyCode: BRL
                      merchantCurrencySymbol: R$
                      merchantFee: 0
                      merchantId: '671957775124999'
                      merchantName: TESTE DO JOAO
                      methodCode: token
                      purpose: purchase
                      score: null
                      status: confirmed
                      tags:
                        - customer-purchase-order/ditto
                      tax: 0
                      updated: '2022-05-17T23:00:48.478631+00:00'
                      walletId: ''
                      zipCode: '02101234'
                    type: confirmed
                  - created: '2022-05-17T23:00:14.446333+00:00'
                    errors: []
                    id: '5746826170859520'
                    issuingTransactionId: ''
                    purchase:
                      acquirerId: '35016'
                      amount: 1300
                      cardEnding: '5255'
                      cardId: '6492113835393024'
                      created: '2022-05-17T22:12:13.205801+00:00'
                      endToEndId: 18d87d1a-09f2-40cf-8f6e-0c96a431c2d3
                      holderName: Tony Stark
                      id: '5029260213354496'
                      issuerAmount: 1300
                      issuerCurrencyCode: BRL
                      issuerCurrencySymbol: R$
                      issuingTransactionIds:
                        - '6155160120197120'
                      merchantAmount: 1300
                      merchantCategoryCode: fastFoodRestaurants
                      merchantCountryCode: BRA
                      merchantCurrencyCode: BRL
                      merchantCurrencySymbol: R$
                      merchantFee: 0
                      merchantId: '478093973800893'
                      merchantName: TESTE DO JOAO
                      methodCode: token
                      purpose: purchase
                      score: null
                      status: confirmed
                      tags:
                        - customer-purchase-order/ditto
                      tax: 0
                      updated: '2022-05-17T23:00:45.841792+00:00'
                      walletId: ''
                      zipCode: '02101234'
                    type: confirmed
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-purchase/log/{logId}:
    get:
      operationId: getIssuingPurchaseLog
      tags:
        - Issuing > Issuing Purchase
      summary: Get an issuing purchase log by ID
      description: Get a single Issuing Purchase Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      purchase:
                        $ref: '#/components/schemas/Purchase'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  created: '2022-05-17T23:00:16.807417+00:00'
                  errors: []
                  id: '4875182556577792'
                  issuingTransactionId: ''
                  purchase:
                    acquirerId: '306487'
                    amount: 1200
                    cardEnding: '5255'
                    cardId: '6492113835393024'
                    created: '2022-05-17T22:11:57.298155+00:00'
                    endToEndId: 6a8af4f5-fb14-49cb-9fb0-754adf5fd255
                    holderName: Tony Stark
                    id: '6204168180072448'
                    issuerAmount: 1200
                    issuerCurrencyCode: BRL
                    issuerCurrencySymbol: R$
                    issuingTransactionIds:
                      - '4796793296519168'
                    merchantAmount: 1200
                    merchantCategoryCode: fastFoodRestaurants
                    merchantCountryCode: BRA
                    merchantCurrencyCode: BRL
                    merchantCurrencySymbol: R$
                    merchantFee: 0
                    merchantId: '671957775124999'
                    merchantName: TESTE DO JOAO
                    methodCode: token
                    purpose: purchase
                    score: null
                    status: confirmed
                    tags:
                      - customer-purchase-order/ditto
                    tax: 0
                    updated: '2022-05-17T23:00:48.478631+00:00'
                    walletId: ''
                    zipCode: '02101234'
                  type: confirmed
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-transaction:
    get:
      operationId: listIssuingTransactions
      tags:
        - Issuing > Issuing Transaction
      summary: List issuing transactions
      description: >-
        Here you can list and filter all Issuing Transactions you have made. We
        return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: List of strings to get specific entities by their tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: externalIds
          in: query
          description: List of strings to get specific entities by externalIds.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Transactions'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CmkKFAoHY3JlYXRlZBIJCODx9p-T5_cCChAKCmNoYWluQ291bnQSAggWEjtqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIfCxISSXNzdWluZ1RyYW5zYWN0aW9uGICAgOSK644KDBgAIAE=
                transactions:
                  - amount: 10000
                    balance: 4192241
                    created: '2022-05-17T18:21:02.199444+00:00'
                    description: Carga no saldo global de cartÃ£o
                    id: '6458238019043328'
                    source: issuing-invoice/5310735190065152
                    tags: []
                  - amount: 10000
                    balance: 4182241
                    created: '2022-05-17T18:21:01.949152+00:00'
                    description: Carga no saldo global de cartÃ£o
                    id: '5694751571443712'
                    source: issuing-invoice/5212706856501248
                    tags: []
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-transaction/{transactionId}:
    get:
      operationId: getIssuingTransaction
      tags:
        - Issuing > Issuing Transaction
      summary: Get an issuing transaction by ID
      description: Get a single Issuing Transaction by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: transactionId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              example:
                transaction:
                  amount: 10000
                  balance: 4192241
                  created: '2022-05-17T18:21:02.199444+00:00'
                  description: Carga no saldo global de cartÃ£o
                  id: '6458238019043328'
                  source: issuing-invoice/5310735190065152
                  tags: []
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-withdrawal:
    post:
      operationId: createIssuingWithdrawal
      tags:
        - Issuing > Issuing Withdrawal
      summary: Create an issuing withdrawal
      description: >-
        Withdrawal money from your Issuing Balance.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | amount | REQUIRED | A non-negative integer that represents the amount
        in cents to be withdraw. |

        | externalId | REQUIRED | Unique external id to avoid duplicated
        withdrawals. |

        | description | REQUIRED | Description for the withdrawal. |

        | tags | OPTIONAL | List of strings to tag the entity for future
        queries. All tags will be converted to lowercase. |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Withdrawal'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Withdrawal'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listIssuingWithdrawals
      tags:
        - Issuing > Issuing Withdrawal
      summary: List issuing withdrawals
      description: >-
        Here you can list and filter all Issuing Withdrawals you have made. We
        return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: tags
          in: query
          description: List of strings to get specific entities by their tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: externalIds
          in: query
          description: List of strings to get specific entities by externalIds.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Withdrawals'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  ClYKFAoHY3JlYXRlZBIJCNqalNKS5_cCEjpqGGR-YXBpLW1zLWNhcmQtaXNzdWVyLWRldnIeCxIRSXNzdWluZ1dpdGhkcmF3YWwYgICAxOnpxAkMGAAgAQ==
                withdrawals:
                  - amount: 10000
                    created: '2022-05-17T20:10:18.179144+00:00'
                    description: Sending back
                    externalId: my_external_id_1
                    id: '6037115762638848'
                    issuingTransactionId: '5474165809217536'
                    tags:
                      - iron
                      - bank
                    transactionId: '5658206160289792'
                    updated: '2022-05-17T20:10:18.580625+00:00'
                  - amount: 10000
                    created: '2022-05-17T18:18:18.851674+00:00'
                    description: Sending back
                    externalId: 006ca81f-ea92-413c-9408-9ad062fcfc9a
                    id: '5369252844404736'
                    issuingTransactionId: '6495152751247360'
                    tags: []
                    transactionId: '5672161985429504'
                    updated: '2022-05-17T18:18:19.497659+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/issuing-withdrawal/{withdrawalId}:
    get:
      operationId: getIssuingWithdrawal
      tags:
        - Issuing > Issuing Withdrawal
      summary: Get an issuing withdrawal by ID
      description: Get a single issuing Withdrawal by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: withdrawalId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Withdrawal'
              example:
                withdrawal:
                  amount: 10000
                  created: '2022-05-17T20:10:18.179144+00:00'
                  description: Sending back
                  externalId: my_external_id_1
                  id: '6037115762638848'
                  issuingTransactionId: '5474165809217536'
                  tags:
                    - iron
                    - bank
                  transactionId: '5658206160289792'
                  updated: '2022-05-17T20:10:18.580625+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/credit-note:
    post:
      operationId: createCreditNotes
      tags:
        - Credit > Credit Note
      summary: Create credit notes
      description: >-
        Create a Credit Note to generate a CCB contract. The Total Effective
        Cost (CET) of the contract will be automatically calculated based on the
        installment flow chosen. It may not surpass 1000% per year.


        | Parameters | Value Type | Description |

        | --- | --- | --- |

        | templateId | REQUIRED | Id of the contract template which the credit
        note will be based on |

        | name | REQUIRED | Debtor's full name |

        | taxId | REQUIRED | Debtor's taxId (CPF/CNPJ) |

        | nominalAmount | REQUIRED | Amount in cents transferred to the credit
        receiver, before deductions. |

        | scheduled | REQUIRED | Minimum date of payment execution. Execution
        will only happen if the credit note has been signed. |

        | invoices | REQUIRED | List of Invoice objects to be created and sent
        to the credit receiver. |

        | payment | REQUIRED | Payment object (for example a Transfer) to be
        created and sent to the credit receiver. |

        | paymentType | REQUIRED | Payment object type to be sent to the credit
        receiver. |

        | signers | REQUIRED | List of dictionaries. Each dictionary contains
        the signer's name, email and delivery method for the contract. |

        | externalId | REQUIRED | String that must be unique among all your
        Credit Notes. |

        | expiration | OPTIONAL | Time in seconds counted from the scheduled
        datetime until the Credit Note expires. After expiration, the Credit
        Note cannot be signed anymore. |

        | rebateAmount | OPTIONAL | Credit analysis fee deducted from the
        nominal amount. |

        | tags | OPTIONAL | List of strings for reference when searching for
        Credit Notes |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notes'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notes'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listCreditNotes
      tags:
        - Credit > Credit Note
      summary: List credit note
      description: >-
        Here you can list and filter all Credit Notes you have made. We return
        it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter entities by the specified status.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: List of strings to get specific entities by their tags.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: ids
          in: query
          description: List of strings to get specific entities by their ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Notes'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: null
                notes:
                  - amount: 193461
                    created: '2022-05-17T20:14:23.054318+00:00'
                    documentId: '6647908271128576'
                    expiration: '2022-08-05T07:00:00+00:00'
                    externalId: my_unique_id
                    id: '6425285620662272'
                    interest: 20.55
                    invoices:
                      - amount: 234413
                        descriptions: []
                        discounts: []
                        due: '2023-06-17T02:59:59.999999+00:00'
                        expiration: 5097600
                        fine: 3
                        id: ''
                        interest: 1
                        name: Jamie Lannister
                        tags: []
                        taxId: 012.345.678-90
                    name: Jamie Lannister
                    nominalAmount: 200000
                    payment:
                      accountNumber: '5005482'
                      accountType: checking
                      amount: 193461
                      bankCode: '60701190'
                      branchCode: '7248'
                      id: ''
                      name: Jamie Lannister
                      scheduled: '2022-05-17T20:14:22.858881+00:00'
                      status: ''
                      tags: []
                      taxId: 594.739.480-42
                    paymentType: transfer
                    rebateAmount: 0
                    scheduled: '2022-06-07T07:00:00+00:00'
                    signers:
                      - contact: jamie.lannister@gmail.com
                        method: link
                        name: Jamie Lannister
                    status: created
                    tags: []
                    taxAmount: 6539
                    taxId: 012.345.678-90
                    templateId: '5707012469948416'
                    transactionIds: []
                    updated: '2022-05-17T20:14:24.326562+00:00'
                    workspaceId: '6275127679385600'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/credit-note/{noteId}:
    get:
      operationId: getCreditNote
      tags:
        - Credit > Credit Note
      summary: Get a credit note by ID
      description: Get a single Credit Note by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: noteId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string 

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
              example:
                note:
                  amount: 193461
                  created: '2022-05-17T20:14:23.054318+00:00'
                  documentId: '6647908271128576'
                  expiration: '2022-08-05T07:00:00+00:00'
                  externalId: my_unique_id
                  id: '6425285620662272'
                  interest: 20.55
                  invoices:
                    - amount: 234413
                      descriptions: []
                      discounts: []
                      due: '2023-06-17T02:59:59.999999+00:00'
                      expiration: 5097600
                      fine: 3
                      id: ''
                      interest: 1
                      name: Jamie Lannister
                      tags: []
                      taxId: 012.345.678-90
                  name: Jamie Lannister
                  nominalAmount: 200000
                  payment:
                    accountNumber: '5005482'
                    accountType: checking
                    amount: 193461
                    bankCode: '60701190'
                    branchCode: '7248'
                    id: ''
                    name: Jamie Lannister
                    scheduled: '2022-05-17T20:14:22.858881+00:00'
                    status: ''
                    tags: []
                    taxId: 594.739.480-42
                  paymentType: transfer
                  rebateAmount: 0
                  scheduled: '2022-06-07T07:00:00+00:00'
                  signers:
                    - contact: jamie.lannister@gmail.com
                      method: link
                      name: Jamie Lannister
                  status: created
                  tags: []
                  taxAmount: 6539
                  taxId: 012.345.678-90
                  templateId: '5707012469948416'
                  transactionIds: []
                  updated: '2022-05-17T20:14:24.326562+00:00'
                  workspaceId: '6275127679385600'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/credit-note/log:
    get:
      operationId: listCreditNoteLogs
      tags:
        - Credit > Credit Note
      summary: List credit note logs
      description: Here you can list and filter all Credit Note Logs. We return it paged.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: types
          in: query
          description: Filter logs by log types.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: noteIds
          in: query
          description: List of strings to get specific logs by their Credit Note ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      note:
                        $ref: '#/components/schemas/Note'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: null
                logs:
                  - errors: []
                    id: '6483512089640960'
                    note:
                      amount: 193461
                      created: '2022-05-17T20:14:23.054318+00:00'
                      documentId: '6647908271128576'
                      expiration: '2022-08-05T07:00:00+00:00'
                      externalId: my_unique_id
                      id: '6425285620662272'
                      interest: 20.55
                      invoices:
                        - amount: 234413
                          descriptions: []
                          discounts: []
                          due: '2023-06-17T02:59:59.999999+00:00'
                          expiration: 5097600
                          fine: 3
                          id: ''
                          interest: 1
                          name: Jamie Lannister
                          tags: []
                          taxId: 012.345.678-90
                      name: Jamie Lannister
                      nominalAmount: 200000
                      payment:
                        accountNumber: '5005482'
                        accountType: checking
                        amount: 193461
                        bankCode: '60701190'
                        branchCode: '7248'
                        id: ''
                        name: Jamie Lannister
                        scheduled: '2022-05-17T20:14:22.858881+00:00'
                        status: ''
                        tags: []
                        taxId: 594.739.480-42
                      paymentType: transfer
                      rebateAmount: 0
                      scheduled: '2022-06-07T07:00:00+00:00'
                      signers:
                        - contact: jamie.lannister@gmail.com
                          method: link
                          name: Jamie Lannister
                      status: created
                      tags: []
                      taxAmount: 6539
                      taxId: 012.345.678-90
                      templateId: '5707012469948416'
                      transactionIds: []
                      updated: '2022-05-17T20:14:24.355339+00:00'
                      workspaceId: '6275127679385600'
                    type: registered
                    updated: '2022-05-17T20:14:24.355346+00:00'
                  - errors: []
                    id: '5017910737108992'
                    note:
                      amount: 193461
                      created: '2022-05-17T20:14:23.054318+00:00'
                      documentId: ''
                      expiration: '2022-08-05T07:00:00+00:00'
                      externalId: my_unique_id
                      id: '6425285620662272'
                      interest: 20.55
                      invoices:
                        - amount: 234413
                          descriptions: []
                          discounts: []
                          due: '2023-06-17T02:59:59.999999+00:00'
                          expiration: 5097600
                          fine: 3
                          id: ''
                          interest: 1
                          name: Jamie Lannister
                          tags: []
                          taxId: 012.345.678-90
                      name: Jamie Lannister
                      nominalAmount: 200000
                      payment:
                        accountNumber: '5005482'
                        accountType: checking
                        amount: 193461
                        bankCode: '60701190'
                        branchCode: '7248'
                        id: ''
                        name: Jamie Lannister
                        scheduled: '2022-05-17T20:14:22.858881+00:00'
                        status: ''
                        tags: []
                        taxId: 594.739.480-42
                      paymentType: transfer
                      rebateAmount: 0
                      scheduled: '2022-06-07T07:00:00+00:00'
                      signers:
                        - contact: jamie.lannister@gmail.com
                          method: link
                          name: Jamie Lannister
                      status: created
                      tags: []
                      taxAmount: 6539
                      taxId: 012.345.678-90
                      templateId: '5707012469948416'
                      transactionIds: []
                      updated: '2022-05-17T20:14:24.355060+00:00'
                      workspaceId: '6275127679385600'
                    type: created
                    updated: '2022-05-17T20:14:24.355069+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/credit-note/log/{logId}:
    get:
      operationId: getCreditNoteLog
      tags:
        - Credit > Credit Note
      summary: Get a credit note log by ID
      description: Get a single Credit Note Log by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: logId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Log:
                    type: object
                    properties:
                      note:
                        $ref: '#/components/schemas/Note'
                      created:
                        type: string
                        example: '2022-05-04T17:16:34.805+00:00'
                      errors: 
                        type: string
                        example: []
                      id:
                        type: string
                        example: "5676741565612032"
                      type:
                        type: string
                        example: "created"
              example:
                log:
                  errors: []
                  id: '6483512089640960'
                  note:
                    amount: 193461
                    created: '2022-05-17T20:14:23.054318+00:00'
                    documentId: '6647908271128576'
                    expiration: '2022-08-05T07:00:00+00:00'
                    externalId: my_unique_id
                    id: '6425285620662272'
                    interest: 20.55
                    invoices:
                      - amount: 234413
                        descriptions: []
                        discounts: []
                        due: '2023-06-17T02:59:59.999999+00:00'
                        expiration: 5097600
                        fine: 3
                        id: ''
                        interest: 1
                        name: Jamie Lannister
                        tags: []
                        taxId: 012.345.678-90
                    name: Jamie Lannister
                    nominalAmount: 200000
                    payment:
                      accountNumber: '5005482'
                      accountType: checking
                      amount: 193461
                      bankCode: '60701190'
                      branchCode: '7248'
                      id: ''
                      name: Jamie Lannister
                      scheduled: '2022-05-17T20:14:22.858881+00:00'
                      status: ''
                      tags: []
                      taxId: 594.739.480-42
                    paymentType: transfer
                    rebateAmount: 0
                    scheduled: '2022-06-07T07:00:00+00:00'
                    signers:
                      - contact: jamie.lannister@gmail.com
                        method: link
                        name: Jamie Lannister
                    status: created
                    tags: []
                    taxAmount: 6539
                    taxId: 012.345.678-90
                    templateId: '5707012469948416'
                    transactionIds: []
                    updated: '2022-05-17T20:14:24.355339+00:00'
                    workspaceId: '6275127679385600'
                  type: registered
                  updated: '2022-05-17T20:14:24.355346+00:00'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/event:
    get:
      operationId: listEvents
      tags:
        - Event
      summary: List events
      description: >-
        Get a list of non-deleted events in chunks of at most 100. If you need
        smaller chunks, use the limit parameter.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: isDelivered
          in: query
          description: If false, only gets events that haven't been delivered. If true, only gets events that have already been delivered.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Events'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  Ck0KFAoHY3JlYXRlZBIJCOzOjcus5_cCEjFqFGl-YXBpLW1zLXdlYmhvb2stZGV2chkLEgxOb3RpZmljYXRpb24YgICAhP6w2woMGAAgAQ==
                events:
                  - created: '2022-05-17T20:14:24.267083+00:00'
                    id: '6414584130830336'
                    isDelivered: true
                    log:
                      errors: []
                      id: '6483512089640960'
                      note:
                        amount: 193461
                        created: '2022-05-17T20:14:23.054318+00:00'
                        documentId: '6647908271128576'
                        expiration: '2022-08-05T07:00:00+00:00'
                        externalId: my_unique_id
                        id: '6425285620662272'
                        interest: 20.55
                        invoices:
                          - amount: 234413
                            descriptions: []
                            discounts: []
                            due: '2023-06-17T02:59:59.999999+00:00'
                            expiration: 5097600
                            fine: 3
                            id: ''
                            interest: 1
                            name: Jamie Lannister
                            tags: []
                            taxId: 012.345.678-90
                        name: Jamie Lannister
                        nominalAmount: 200000
                        payment:
                          accountNumber: '5005482'
                          accountType: checking
                          amount: 193461
                          bankCode: '60701190'
                          branchCode: '7248'
                          id: ''
                          name: Jamie Lannister
                          scheduled: '2022-05-17T20:14:22.858881+00:00'
                          status: ''
                          tags: []
                          taxId: 594.739.480-42
                        paymentType: transfer
                        rebateAmount: 0
                        scheduled: '2022-06-07T07:00:00+00:00'
                        signers:
                          - contact: jamie.lannister@gmail.com
                            method: link
                            name: Jamie Lannister
                        status: created
                        tags: []
                        taxAmount: 6539
                        taxId: 012.345.678-90
                        templateId: '5707012469948416'
                        transactionIds: []
                        updated: '2022-05-17T20:14:23.565643+00:00'
                        workspaceId: '6275127679385600'
                      type: registered
                      updated: '2022-05-17T20:14:23.565648+00:00'
                    subscription: credit-note
                    workspaceId: '6275127679385600'
                  - created: '2022-05-17T20:14:23.385452+00:00'
                    id: '6031404865421312'
                    isDelivered: true
                    log:
                      errors: []
                      id: '5017910737108992'
                      note:
                        amount: 193461
                        created: '2022-05-17T20:14:23.054318+00:00'
                        documentId: ''
                        expiration: '2022-08-05T07:00:00+00:00'
                        externalId: my_unique_id
                        id: '6425285620662272'
                        interest: 20.55
                        invoices:
                          - amount: 234413
                            descriptions: []
                            discounts: []
                            due: '2023-06-17T02:59:59.999999+00:00'
                            expiration: 5097600
                            fine: 3
                            id: ''
                            interest: 1
                            name: Jamie Lannister
                            tags: []
                            taxId: 012.345.678-90
                        name: Jamie Lannister
                        nominalAmount: 200000
                        payment:
                          accountNumber: '5005482'
                          accountType: checking
                          amount: 193461
                          bankCode: '60701190'
                          branchCode: '7248'
                          id: ''
                          name: Jamie Lannister
                          scheduled: '2022-05-17T20:14:22.858881+00:00'
                          status: ''
                          tags: []
                          taxId: 594.739.480-42
                        paymentType: transfer
                        rebateAmount: 0
                        scheduled: '2022-06-07T07:00:00+00:00'
                        signers:
                          - contact: jamie.lannister@gmail.com
                            method: link
                            name: Jamie Lannister
                        status: created
                        tags: []
                        taxAmount: 6539
                        taxId: 012.345.678-90
                        templateId: '5707012469948416'
                        transactionIds: []
                        updated: '2022-05-17T20:14:23.073297+00:00'
                        workspaceId: '6275127679385600'
                      type: created
                      updated: '2022-05-17T20:14:23.073303+00:00'
                    subscription: credit-note
                    workspaceId: '6275127679385600'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/event/{eventId}:
    get:
      operationId: getEvent
      tags:
        - Event
      summary: Get an event by ID
      description: Get a single event by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: eventId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
              example:
                event:
                  created: '2022-05-17T20:14:24.267083+00:00'
                  id: '6414584130830336'
                  isDelivered: true
                  log:
                    errors: []
                    id: '6483512089640960'
                    note:
                      amount: 193461
                      created: '2022-05-17T20:14:23.054318+00:00'
                      documentId: '6647908271128576'
                      expiration: '2022-08-05T07:00:00+00:00'
                      externalId: my_unique_id
                      id: '6425285620662272'
                      interest: 20.55
                      invoices:
                        - amount: 234413
                          descriptions: []
                          discounts: []
                          due: '2023-06-17T02:59:59.999999+00:00'
                          expiration: 5097600
                          fine: 3
                          id: ''
                          interest: 1
                          name: Jamie Lannister
                          tags: []
                          taxId: 012.345.678-90
                      name: Jamie Lannister
                      nominalAmount: 200000
                      payment:
                        accountNumber: '5005482'
                        accountType: checking
                        amount: 193461
                        bankCode: '60701190'
                        branchCode: '7248'
                        id: ''
                        name: Jamie Lannister
                        scheduled: '2022-05-17T20:14:22.858881+00:00'
                        status: ''
                        tags: []
                        taxId: 594.739.480-42
                      paymentType: transfer
                      rebateAmount: 0
                      scheduled: '2022-06-07T07:00:00+00:00'
                      signers:
                        - contact: jamie.lannister@gmail.com
                          method: link
                          name: Jamie Lannister
                      status: created
                      tags: []
                      taxAmount: 6539
                      taxId: 012.345.678-90
                      templateId: '5707012469948416'
                      transactionIds: []
                      updated: '2022-05-17T20:14:23.565643+00:00'
                      workspaceId: '6275127679385600'
                    type: registered
                    updated: '2022-05-17T20:14:23.565648+00:00'
                  subscription: credit-note
                  workspaceId: '6275127679385600'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    delete:
      operationId: deleteEvent
      tags:
        - Event
      summary: Delete an event by ID
      description: |-
        Delete a single event from the event list.

        NOTE: This action cannot be undone.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: eventId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
              example:
                event:
                  created: '2022-05-17T20:14:24.267083+00:00'
                  id: '6414584130830336'
                  isDelivered: true
                  log:
                    errors: []
                    id: '6483512089640960'
                    note:
                      amount: 193461
                      created: '2022-05-17T20:14:23.054318+00:00'
                      documentId: '6647908271128576'
                      expiration: '2022-08-05T07:00:00+00:00'
                      externalId: my_unique_id
                      id: '6425285620662272'
                      interest: 20.55
                      invoices:
                        - amount: 234413
                          descriptions: []
                          discounts: []
                          due: '2023-06-17T02:59:59.999999+00:00'
                          expiration: 5097600
                          fine: 3
                          id: ''
                          interest: 1
                          name: Jamie Lannister
                          tags: []
                          taxId: 012.345.678-90
                      name: Jamie Lannister
                      nominalAmount: 200000
                      payment:
                        accountNumber: '5005482'
                        accountType: checking
                        amount: 193461
                        bankCode: '60701190'
                        branchCode: '7248'
                        id: ''
                        name: Jamie Lannister
                        scheduled: '2022-05-17T20:14:22.858881+00:00'
                        status: ''
                        tags: []
                        taxId: 594.739.480-42
                      paymentType: transfer
                      rebateAmount: 0
                      scheduled: '2022-06-07T07:00:00+00:00'
                      signers:
                        - contact: jamie.lannister@gmail.com
                          method: link
                          name: Jamie Lannister
                      status: created
                      tags: []
                      taxAmount: 6539
                      taxId: 012.345.678-90
                      templateId: '5707012469948416'
                      transactionIds: []
                      updated: '2022-05-17T20:14:23.565643+00:00'
                      workspaceId: '6275127679385600'
                    type: registered
                    updated: '2022-05-17T20:14:23.565648+00:00'
                  subscription: credit-note
                  workspaceId: '6275127679385600'
                message: Event successfully deleted
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    patch:
      operationId: updateEvent
      tags:
        - Event
      summary: Update an event by ID
      description: >-
        The only information you can update in an Event is the isDelivered
        property. This can be useful when, after experiencing server downtime on
        your side, you list all events with isDelivered=false, process them, and
        then set them as delivered to restabilize your operations.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  example: rejected
                isDelivered:
                  type: boolean
                  example: true
            example:
                isDelivered: true
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: eventId
          in: path
          schema:
            type: string
          required: true
          description: Object's unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/event/attempt:
    get:
      operationId: listEventAttempt
      tags:
        - Event
      summary: List failed event delivery attempts
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: after
          in: query
          description: Filter entities created after this date.
          required: false
          schema:
            type: string
            format: date
        - name: before
          in: query
          description: Filter entities created before this date.
          required: false
          schema:
            type: string
            format: date
        - name: eventlIds
          in: query
          description: List of strings to get specific entities by Event ids.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: webhookIds
          in: query
          description: List of strings to get specific entities by Webhook ids.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Attempts'
                - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                attempts:
                  - code: invalidConnection
                    created: '2022-05-11T21:48:27.755908+00:00'
                    eventId: '4836873369288704'
                    id: '5364974092288000'
                    message: Connection failed
                    webhookId: '5625289241526272'
                cursor: null
  /{version}/webhook:
    post:
      operationId: createWebhook
      tags:
        - Webhook
      summary: Create a webhook
      description: >-
        Here you can register a new Webhook URL. The subscriptions refer to
        which kind of Log will be notified to the Webhook URL being registered.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    get:
      operationId: listWebhooks
      tags:
        - Webhook
      summary: List webhooks
      description: >-
        Get a list of non-deleted events in chunks of at most 100. If you need
        smaller chunks, use the limit parameter.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: cursor
          in: query
          description: String used to get the next batch of results.
          required: false
          schema:
            type: string
            format: byte
        - name: limit
          in: query
          description: Number of results per cursor. Max = 100.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Webhooks'
                  - type: object
                properties:
                  cursor:
                    type: string
                    example: " CkcKFAoHY3JlYXRlZBIJCMyR69q55_cCEitqEGl-YXBpLW1zLXNwaS1kZXZyFwsSClBpeFJlcXVlc3QYgICA5NDXkAoMGAAgAQ== "
              example:
                cursor: >-
                  CjISLGoUaX5hcGktbXMtd2ViaG9vay1kZXZyFAsSB1dlYmhvb2sYgICAuMWl2AkMGAAgAA==
                webhooks:
                  - id: '5118348345999360'
                    subscriptions:
                      - contract
                      - credit-note
                      - issuing-card
                      - issuing-invoice
                      - issuing-purchase
                      - pix-request.in
                      - pix-request.out
                      - pix-reversal.in
                      - pix-reversal.out
                      - signer
                    url: https://webhook.site/83a371cb-3ba0-487f-8c37-ffe049f271be
                  - id: '5454867623575552'
                    subscriptions:
                      - contract
                      - credit-note
                      - issuing-card
                      - issuing-invoice
                      - issuing-purchase
                      - pix-request.in
                      - pix-request.out
                      - pix-reversal.in
                      - pix-reversal.out
                      - signer
                    url: https://webhook.site/6cd3c98d-60ca-4f4a-97c6-a7d0365b15a7
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
  /{version}/webhook/{webhookId}:
    get:
      operationId: getWebhook
      tags:
        - Webhook
      summary: Get a webhook by ID
      description: Get a single Webhook subscription by its id.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: webhookId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
              example:
                webhook:
                  id: '5454867623575552'
                  subscriptions:
                    - contract
                    - credit-note
                    - issuing-card
                    - issuing-invoice
                    - issuing-purchase
                    - pix-request.in
                    - pix-request.out
                    - pix-reversal.in
                    - pix-reversal.out
                    - signer
                  url: https://webhook.site/6cd3c98d-60ca-4f4a-97c6-a7d0365b15a7
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
    delete:
      operationId: deleteWebhook
      tags:
        - Webhook
      summary: Delete a webhook by ID
      description: |-
        Delete a single Webhook subscription using its id.

        NOTE: This action cannot be undone.
      parameters:
        - name: version
          in: path
          schema:
            type: string
          required: true
        - name: webhookId
          in: path
          description: Entity unique identifier.
          required: true
          schema:
            type: string
            format: '^\d{16}$'
        - name: fields
          in: query
          description: List of strings to filter response JSON keys.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
              example:
                message: Webhook successfully deleted
                webhook:
                  id: '5930589634953216'
                  subscriptions:
                    - contract
                    - credit-note
                    - signer
                  url: https://webhook.site/287d2ec8-bc67-4a1e-83b9-d3151ebfcfb7
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestErrors'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrors'
        default:
          description: Unexpected error
components:
  schemas:
    Request:
      type: object
      required:
        - amount
        - externalId
        - senderName
        - senderTaxId
        - senderBranchCode
        - senderAccountNumber
        - senderAccountType
        - receiverName
        - receiverTaxId
        - receiverBankCode
        - receiverAccountNumber
        - receiverBranchCode
        - receiverAccountType
        - endToEndId
      properties:
        amount:
          type: integer
          example: 12344
        externalId:
          type: string
          example: my-internal-id-123456
        senderName:
          type: string
          example: Edward Stark
        senderTaxId:
          type: string
          example: 20.018.183/0001-80
        senderBranchCode:
          type: string
          example: 1357-9
        senderAccountNumber:
          type: string
          example: 876543-2
        senderAccountType:
          type: string
          example: checking
        receiverName:
          type: string
          example: Edward Stark
        receiverTaxId:
          type: string
          example: 20.018.183/0001-80
        receiverBankCode:
          type: string
          example: 20018183
        receiverAccountNumber:
          type: string
          example: 876543-2
        receiverBranchCode:
          type: string
          example: 1357-9
        receiverAccountType:
          type: string
          example: "savings"
        endToEndId:
          type: string
          example: E79457883202101262140HHX553UPqeq
        receiverKeyId:
          type: string
          example: 20.018.183/0001-80
        reconciliationId:
          type: string
          example: b77f5236-7ab9-4487-9f95-66ee6eaf1781
        description:
          example: merchant
          type: string
        initiatorTaxId:
          type: string
          example: 20.018.183/0001-80
        cashAmount:
          type: string
          example: 1000
        cashierBankCode:
          type: string
          example: "20018183"
        cashierType:
          example: merchant
          type: string
        tags:
          items:
            type: string
          example: ["employees", "monthly"]
        method:
          type: string
          example: manual
        status:
          type: string
          example: created
          readOnly: true
        fee:
          type: integer
          example: 300
          readOnly: true
        flow:
          type: string
          example: in
          readOnly: true
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        senderBankCode:
          type: string
          example: 20018183
          readOnly: true
        created:
          type: string
          format: date
          example: '2022-05-03 17:16:34.787+00:00'
          readOnly: true
        updated:
          type: string
          format: date
          example: '2022-05-03 17:16:34.787+00:00'
          readOnly: true
    Requests:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/Request'
    Reversal:
      type: object
      required:
        - amount
        - externalId
        - endToEndId
        - reason
      properties:
        amount:
          type: integer
          example: 1000
        endToEndId:
          type: string
          example: E79457883202101262140HHX553UPqeq
        externalId:
          type: string
          example: "my_unique_id"
        reason:
          type: string
          example: fraud
        tags:
          items:
            type: string
          example: ["employees", "monthly"]
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        returnId:
          type: string
          example: D20018183202202030109X3OoBHG74wo
          readOnly: true
        bankCode:
          type: string
          readOnly: true
          example: 20018183
        fee:
          type: integer
          example: 200
          readOnly: true
        status:
          type: string
          example: processing
          readOnly: true
        flow:
          type: string
          example: in
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-05-07 13:07:38.186+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-07 13:07:38.186+00:00'
          readOnly: true
    Reversals:
      type: object
      properties:
        reversals:
          type: array
          items:
            $ref: '#/components/schemas/Reversal'
    Balance:
      type: object
      properties:
        amount:
          type: string
          example: 100
          readOnly: true
        currency:
          type: string
          example: BRL
          readOnly: true
        id:
          type: string
          example: 5692908409716736
          readOnly: true
        updated:
          type: string
          format: date
          example: '2022-05-04 18:02:18.297+00:00'
          readOnly: true
    Statement:
      type: object
      required:
        - after
        - before
        - type
      properties:
        after:
          type: string
          format: date
        before:
          type: string
          format: date
        type:
          type: string
          example: interchangeTotal
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        status:
          type: string
          example: success
          readOnly: true
        transactionCount:
          type: integer
          example: 11
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-02-01T14:49:21.831976+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-02-01T14:49:21.831984+00:00'
          readOnly: true
    Statements:
      type: object
      properties:
        statements:
          type: array
          items:
            $ref: '#/components/schemas/Statement'
    Key:
      type: object
      required:
        - accountCreated
        - accountNumber
        - accountType
        - branchCode
        - name
        - taxId
      properties:
        accountCreated:
          type: string
          format: datetime
          example: '2022-02-01T00:00:00.00'
        accountNumber:
          type: string
          example: 76543
        accountType:
          type: string
          example: checking
        branchCode:
          type: string
          example: 1234
        name:
          type: string
          example: Jamie Lannister
        taxId:
          type: string
          example: 012.345.678-90
        id:
          type: string
          example: +5511989898989
        tags:
          items:
            type: string
          example: ["employees", "monthly"]
        owned:
          type: string
          format: datetime
          readOnly: true
        ownerType:
          type: string
          example: business
          readOnly: true
        status:
          type: string
          example: registered
          readOnly: true
        bankCode:
          type: string
          example: 20018183
          readOnly: true
        bankName:
          type: string
          example: StarkBank
          readOnly: true
        type:
          type: string
          example: cpf
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-05-04 18:02:18.297+00:00'
          readOnly: true
    Keys:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
    Claim:
      type: object
      required:
        - accountCreated
        - accountNumber
        - accountType
        - branchCode
        - name
        - taxId
        - keyId
      properties:
        accountCreated:
          type: string
          format: datetime
        accountNumber:
          type: string
          example: 76543
        accountType:
          type: string
          example: checking
        branchCode:
          type: string 
          example: 1234
        name:
          type: string 
          example: Jamie Lannister
        taxId:
          type: string 
          example: 012.345.678-90
        keyId:
          type: string 
          example: +5511989898989
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        status:
          type: string
          example: created
          readOnly: true  
        type:
          type: string
          example: ownership
          readOnly: true  
        keyType:
          type: string
          example: CPF
          readOnly: true
        agent:
          type: string
          example: claimer
          readOnly: true  
        bankCode:
          type: string
          example: 20018183
          readOnly: true 
        claimedBankCode:
          type: string
          example: 20018183
          readOnly: true   
        created:
          type: string
          format: datetime
          example: '2022-01-01T00:00:00+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-04T00:00:00+00:00'
          readOnly: true
    Claims:
      type: object
      properties:
        claims:
          type: array
          items:
            $ref: '#/components/schemas/Claim'
    Director:
      type: object
      required:
        - name
        - taxId
        - phone
        - email
        - password
        - teamEmail
        - teamPhones
      properties:
        name:
          type: string
          example: Edward Stark
        taxId:
          type: string
          example: 012.345.678-90
        phone:
          type: string
          example: +551198989898
        email:
          type: string 
          example: ned.stark@starkbank.com
        password:
          type: string 
          example: 12345678
        teamEmail:
          type: string 
          example: pix.team@company.com
        teamPhones:
          items:
            type: string
          example: ["+5511988889999", "+5511988889998"]
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        status:
          type: string
          example: success
          readOnly: true
    Infraction:
      type: object
      required:
        - referenceId
        - type
      properties:
        referenceId:
          type: integer
          example: E20018183202201201450u34sDGd19lz
        type:
          type: string
          example: fraud
        description:
          type: string 
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        creditedBankCode:
          type: string
          example: 20018183
          readOnly: true  
        debitedBankCode:
          type: string
          example: 20018183
          readOnly: true  
        agent:
          type: string
          example: reported
          readOnly: true
        analysis:
          type: string
          readOnly: true  
        bacenId:
          type: string
          readOnly: true 
        reportedBy:
          type: string
          example: credited
          readOnly: true   
        result:
          type: string
          example: agreed 
          readOnly: true 
        status:
          type: string
          example: failed
          readOnly: true 
        created:
          type: string
          format: datetime
          example: '2022-05-05 09:08:40.280+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-06 09:08:40.280+00:00'
          readOnly: true
    Infractions:
      type: object
      properties:
        infractions:
          type: array
          items:
            $ref: '#/components/schemas/Infraction'
    Chargeback:
      type: object
      required:
        - amount
        - referenceId
        - reason
      properties:
        amount:
          type: integer
          example: 11234
        referenceId:
          type: string
          example: E20018183202201201450u34sDGd19lz
        reason:
          type: string
          example: fraud
        description:
          type: string 
        analysis:
          type: string
          readOnly: true
        bacenId:
          type: string
          readOnly: true  
        senderBankCode:
          type: string
          example: 20018183
          readOnly: true  
        recieverBankCode:
          type: string
          example: 20018183
          readOnly: true
        rejectionReason:
          type: string
          example: noBalance
          readOnly: true  
        reversalReferenceId:
          type: string
          example: D20018183202202030109X3OoBHG74wo
          readOnly: true 
        id:
          type: string
          example: 5656565656565656
          readOnly: true   
        result:
          type: string
          example: rejected
          readOnly: true 
        status:
          type: string
          example: delivered
          readOnly: true 
        created:
          type: string
          format: datetime
          example: '2022-05-05 09:32:17.027+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-05 09:32:17.027+00:00'
          readOnly: true
    Chargebacks:
      type: object
      properties:
        chargebacks:
          type: array
          items:
            $ref: '#/components/schemas/Chargeback'
    Domain:
      type: object
      properties:
        certificates:
          $ref: '#/components/schemas/Certificates'
        name:
          type: string
          example: invoice-h.development.starkbank.com
    Domains:
      type: object
      properties:
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
    Certificate:
      type: object
      properties:
        content:
          type: string
          example: -----BEGIN CERTIFICATE-----\nMIIGzjCCB...\n-----END CERTIFICATE-----\n
    Certificates:
      type: object
      properties:
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
    IssuingBalance:
      type: object
      properties:
        amount:
          type: string
          example: 100
          readOnly: true
        currency:
          type: string
          example: BRL
          readOnly: true
        id:
          type: string
          example: 5729405850615808
          readOnly: true
        updated:
          type: string
          format: date
          example: '2022-05-04 18:02:18.297+00:00'
          readOnly: true
    Bin:
      type: object
      properties:
        category:
          type: string
          example: prepaid
          readOnly: true
        client:
          type: string
          example: business
          readOnly: true
        id:
          type: string
          example: 538102
          readOnly: true
        created:
          type: string
          format: date
          example: '2022-05-04 18:02:18.297+00:00'
          readOnly: true
        network:
          type: string
          example: mastercard
          readOnly: true
        settlement:
          type: string
          example: credit
          readOnly: true
        updated:
          type: string
          format: date
          example: '2022-05-04 18:02:18.297+00:00'
          readOnly: true
    Card:
      type: object 
      required:
        - holderName
        - holderTaxId
        - holderExternalId
      properties:
        holderName:
          type: string
          example: Tony Stark
        holderTaxId:
          type: string
          example: 012.345.678-90
        holderExternalId:
          type: string
          example: my-entity/123
        displayName:
          type: string
          example: ANTHONY STAR
        rules:
          $ref: '#/components/schemas/Rules'
        binId:
          type: string
          example: 53810200
        tags:
          items:
            type: string
          example: ["travel", "food"]
        streetLine1:
          type: string
          example: Av. Paulista, 200
        streetLine2:
          type: string
          example: Apto. 123
        district:
          type: string
          example: Bela Vista
        city:
          type: string
          example: Rio de Janeiro
        stateCode:
          type: string
          example: RJ
        zipCode:
          type: string
          example: 01311-200
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        holderId:
          type: string
          example: 5656565656565656
          readOnly: true
        type:
          type: string
          example: virtual
          readOnly: true
        status:
          type: string
          example: "active"
          readOnly: true
        number:
          type: string
          example: 123
          readOnly: true
        securityCode:
          type: string
          example: 123
          readOnly: true
        expiration:
          type: string
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-05-05 10:12:36.310+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-05 10:12:36.310+00:00'
          readOnly: true
    Cards:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
    Holder:
      type: object 
      required:
        - name
        - taxId
        - externalId
      properties:
        name:
          type: string
          example: Tony Stark
        taxId:
          type: string
          example: 012.345.678-90
        externalId:
          type: string
          example: my-entity/123
        rules:
          $ref: '#/components/schemas/Rules'
        tags:
          items:
            type: string
          example: ["travel", "food"]
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        status:
          type: string
          example: "active"
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-05-05 11:54:31.409+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-05 11:54:31.409+00:00'
          readOnly: true
    Holders:
      type: object
      properties:
        holders:
          type: array
          items:
            $ref: '#/components/schemas/Holder'
    IssuingInvoice:
      type: object 
      required:
        - amount
      properties:
        amount:
          type: integer
          example: 1234
        taxId:
          type: string 
          example: 20.018.183/0001-80
        name:
          type: string
          example: Tony Stark
        tags:
          items:
            type: string
          example: ["travel", "food"]
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        status:
          type: string
          example: "created"
          readOnly: true
        issuingTransactionId:
          type: string
          example: issuing-invoice/5656565656565656
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-05-05 11:54:31.422+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-05 11:54:31.422+00:00'
          readOnly: true
    IssuingInvoices:
      type: object
      properties:
        issuingInvoices:
          type: array
          items:
            $ref: '#/components/schemas/IssuingInvoice'
    Purchase:
      type: object 
      properties:
        limit:
          type: integer
          example: 1
        after:
          type: string 
          example: "2022-01-20"
        before:
          type: string
          example: "2022-02-20"
        ids:
          items:
            type: string
          example: ["5656565656565656"]
        status:
          items:
            type: string
          example: ["approved"]
        endToEndIds:
          items:
            type: string
          example: ["679cd385-642b-49d0-96b7-89491e1249a5"]
        holderIds:
          items:
            type: string
          example: ["5151515151515151"]
        cardIds:
          items:
            type: string
          example: ["5757575757575757"]
        tags:
          items:
            type: string
          example: ["travel", "food"]
    Purchases:
      type: object
      properties:
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
    Transaction:
      type: object 
      properties:
        limit:
          type: integer
          example: 1
        after:
          type: string 
          example: "2022-01-20"
        before:
          type: string
          example: "2022-02-20"
        ids:
          items:
            type: string
          example: ["5656565656565656"]
        externalIds:
          items:
            type: string
          example: ["my_external_id"]
        tags:
          items:
            type: string
          example: ["travel", "food"]
    Transactions:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    Withdrawal:
      type: object 
      required:
        - amount
        - externalId
        - description
      properties:
        amount:
          type: integer
          example: 12345
        externalId:
          type: string
          example: my-entity/123
        description:
          type: string
          example: sending money back
        tags:
          items:
            type: string
          example: ["travel", "food"]
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        transactionId:
          type: string
          readOnly: true
        issuingTransactionId:
          type: string
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-05-05 11:54:31.444+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-05 11:54:31.444+00:00'
          readOnly: true
    Withdrawals:
      type: object
      properties:
        withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/Withdrawal'
    Rule:
      type: object 
      required:
        - name
        - amount
        - interval
      properties:
        name:
          type: string
          example: Travel
        amount:
          type: integer
          example: 20000
        interval:
          type: integer
          example: day
        currencyCode:
          type: string
          example: BRL
        categories:
          items:
            type: string
          example: ["eatingPlacesRestaurants", "travelAgenciesTourOperators"]
        countries:
          items:
            type: string
          example: ["BRA", "USA"]
        methods:
          items:
            type: string
          example: ["chip", "token", "server", "manual", "magstripe", "contactless"]
        counterAmount:
          type: string
          example: 1000
          readOnly: true
        currencySymbol:
          type: string
          example: R$
          readOnly: true
        currencyName:
          example: Brazilian Real
          readOnly: true
        id:
          type: string
          example: 5656565656565656
          readOnly: true
    Rules:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
    Note:
      type: object
      required:
        - templateId
        - name
        - taxId
        - nominalAmount
        - scheduled
        - invoices
        - payment
        - signers
        - externalId
        - paymentType
        - street_line_1
        - street_line_2
        - district
        - city
        - state_code
        - zip_code
      properties:
        templateId:
          type: string
          example: 0123456789101112
        name:
          type: string
          example: Edward Stark
        taxId:
          type: string 
          example: 20.018.183/0001-80
        nominalAmount:
          type: integer
          example: 11234
        scheduled:
          type: string
          format: datetime 
        invoices:
          $ref: '#/components/schemas/Invoices'
        payment:
          $ref: '#/components/schemas/Transfer'
        signers:
          $ref: '#/components/schemas/Signers'
        externalId:
          type: string
          example: my-internal-id-123456
        paymentType:
          type: string  
          example: transfer
        street_line_1:
          type: string  
          example: Av. Paulista, 200
        street_line_2:
          type: string  
          example: Apto. 123
        district:
          type: string  
          example: Bela Vista
        city:
          type: string  
          example: Sao Paulo
        state_code:
          type: string  
          example: SP
        zip_code:
          type: string  
          example: 01311-200
        rebateAmount:
          type: integer
          example: 11234
        expirations:
          type: integer
          example: 5097600
        tags:
          items:
            type: string
          example: ["employees", "monthly"]
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        amount:
          type: integer
          example: 1234
          readOnly: true
        expiration:
          type: integer 
          example: 123456789
          readOnly: true
        documentId:
          type: string
          example: 4545454545454545
          readOnly: true
        status:
          type: string 
          example: canceled
          readOnly: true
        transactionsIds:
          items:
            type: string
          example: ["19827356981273"]
          readOnly: true
        workspaceId:
          type: string
          example: 4545454545454545
          readOnly: true
        interest:
          type: number
          example: 12.5
          readOnly: true
        created:
          type: string
          format: datetime
          readOnly: true
        updated:
          type: string
          format: datetime
          readOnly: true
    Notes:
      type: object
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
    Invoice:
      type: object
      required:
        - amount
      properties:
        amount:
          type: integer
          example: 1234
        due:
          type: string
          format: date
        expiration:
          type: integer
          format: date 
          example: 123456789
        fine:
          type: number
          example: 2.5
        interest:
          type: number
          example: 5.2
        tags:
          items:
            type: string
        descriptions:
          items:
            type: object 
        discounts:
          items:
            type: object 
            readOnly: true
        name:
          type: string
          example: Iron Bank S.A.
          readOnly: true
        taxId:
          type: string
          example: 20.018.183/0001-80
          readOnly: true
        pdf:
          type: string 
          example: https://invoice.starkbank.com/pdf/d454fa4e524441c1b0c1a729457ed9d8
          readOnly: true
        link:
          type: string
          example: https://my-workspace.sandbox.starkbank.com/invoicelink/d454fa4e524441c1b0c1a729457ed9d8
          readOnly: true
        nominalAmount:
          type: integer 
          example: 400000
          readOnly: true
        fineAmount:
          type: integer
          example: 20000
          readOnly: true
        interestAmount:
          type: integer
          example: 10000
          readOnly: true
        discountAmount:
          type: integer
          example: 3000
          readOnly: true
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        brcode:
          type: string 
          example: 00020101021226800014br.gov.bcb.pix2558invoice.starkbank.com/f5333103-3279-4db2-8389-5efe335ba93d5204000053039865802BR5913Arya Stark6009Sao Paulo6220051656565656565656566304A9A0
          readOnly: true
        status:
          type: string
          example: paid
          readOnly: true
        fee:
          type: integer
          example: 200
          readOnly: true
        transactionIds:
          items:
            type: number
          example: ["19827356981273"]
          readOnly: true
        created:
          type: string
          format: datetime
          example: '2022-05-06 11:54:31.462+00:00'
          readOnly: true
        updated:
          type: string
          format: datetime
          example: '2022-05-06 11:54:31.463+00:00'
          readOnly: true
    Invoices:
      type: object
      properties:
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
    Signer:
      type: object
      required:
        - name
        - contact
        - method
      properties:
        name:
          type: string
          example: Tony Stark
        contact:
          type: string
          example: tony@starkindustries.com
        method:
          type: string
          example: link
    Signers:
      type: object
      properties:
        signers:
          type: array
          items:
            $ref: '#/components/schemas/Signer'
    Transfer:
      type: object
      required:
        - name
        - taxId
        - bankCode
        - branchCode
        - accountNumber
      properties:
        name:
          type: string
          example: Anthony Edward Stark
        taxId:
          type: string
          example: 20.018.183/0001-80
        bankCode:
          type: string
          example: 20018183
        branchCode:
          type: string
          example: 1357-9
        accountNumber:
          type: string
          example: 876543-2
        accountType:
          type: string 
          example: "checking"
        tags:
          items:
            type: string
          example: ["employees", "monthly"]
        amount:
          type: integer
          example: 1234
          readOnly: true
        externalId:
          type: integer
          example: my-internal-id-123456
          readOnly: true
        scheduled:
          type: string
          format: date
          readOnly: true
        description:
          type: string
          example: "Payment for service #1234"
          readOnly: true
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        fee:
          type: integer
          example: 200
          readOnly: true
        status:
          type: string
          example: success
          readOnly: true
        transactionIds:
          items: 
            type: string
            example: ["19827356981273"]
          readOnly: true
        created:
          type: string
          format: date
          readOnly: true
        updated:
          type: string
          format: date
          readOnly: true
    Webhook:
      type: object
      required:
        - url
        - subcscriptions
      properties:
        url:
          type: string
        subcscriptions:
          items:
            type: string
          example: ["contract", "credit-note", "signer", "issuing-card", "issuing-invoice", "issuing-purchase", "pix-request.in", "pix-request.out", "pix-reversal.in", "pix-reversal.out", "pix-claim", "pix-key", "pix-chargeback", "pix-infraction"]
        id:
          type: string
          example: 5656565656565656
          readOnly: true
    Webhooks:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
    Event:
      type: object
      properties:
        id:
          type: string
          example: 5656565656565656
          readOnly: true
        log:
          $ref: '#/components/schemas/Note'
        created:
          type: string
          format: date
          readOnly: true
        isDelivered:
          type: boolean
          example: False
          readOnly: true
        subscription:
          type: string
          example: credit-note
          readOnly: true
    Events:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Attempt:
      type: object
      properties:
        code:
          type: string
          example: invalidConnection
          readOnly: true
        eventId:
          type: string
          example: 4836873369288704
          readOnly: true
        created:
          type: string
          format: date
          example: '2022-05-11T21:48:27.755908+00:00'
          readOnly: true
        id:
          type: string
          example: 5364974092288000
          readOnly: true
        message:
          type: string
          example: Connection failed
          readOnly: true
        webhookId:
          type: string
          example: 5625289241526272
          readOnly: true
    Attempts:
      type: object
      properties:
        attempt:
          type: array
          items:
            $ref: '#/components/schemas/Attempt'
    InternalError:
      type: object
      properties:
        code: 
          type: string
          readOnly: true
          example: InternalServerError
        message:
          type: string
          readOnly: true
          example: Houston, we have a problem!
    InternalErrors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/InternalError'
    RequestError:
      type: object
      properties:
        code: 
          type: string
          readOnly: true
        message:
          type: string
          readOnly: true
    RequestErrors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/RequestError'
            